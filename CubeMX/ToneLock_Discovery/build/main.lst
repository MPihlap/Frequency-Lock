ARM GAS  /tmp/ccD6RzjW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemClock_Config:
  26              	.LFB160:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
ARM GAS  /tmp/ccD6RzjW.s 			page 2


  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "pdm2pcm.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "arm_math.h"
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CRC_HandleTypeDef hcrc;
  60:Src/main.c    **** 
  61:Src/main.c    **** I2S_HandleTypeDef hi2s2;
  62:Src/main.c    **** 
  63:Src/main.c    **** SPI_HandleTypeDef hspi1;
  64:Src/main.c    **** 
  65:Src/main.c    **** UART_HandleTypeDef huart2;
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN PV */
  68:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** static void MX_GPIO_Init(void);
  75:Src/main.c    **** static void MX_SPI1_Init(void);
  76:Src/main.c    **** static void MX_USART2_UART_Init(void);
  77:Src/main.c    **** static void MX_I2S2_Init(void);
  78:Src/main.c    **** static void MX_CRC_Init(void);
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  82:Src/main.c    **** // static void SPI2_NVIC_INIT(void);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE BEGIN 0 */
  86:Src/main.c    **** uint16_t PDM_BUF_1[PDM_BUF_SIZE];  // PDM buffer1
  87:Src/main.c    **** uint16_t PCM_BUF_1[PCM_BUF_SIZE];  // PCM buffer1
  88:Src/main.c    **** uint16_t PCM_BUF_2[PCM_BUF_SIZE];  // PCM buffer2
ARM GAS  /tmp/ccD6RzjW.s 			page 3


  89:Src/main.c    **** float32_t fft_output_buffer[PCM_BUF_SIZE * 2];
  90:Src/main.c    **** float32_t fft_input_buffer[PCM_BUF_SIZE];
  91:Src/main.c    **** float32_t fft_mag_buffer[PCM_BUF_SIZE];
  92:Src/main.c    **** uint32_t local_pcm_pointer = 0;  // Keeps track of PCM buffer
  93:Src/main.c    **** uint8_t PCM_switch_flag = 0;
  94:Src/main.c    **** uint16_t *current_PCM_buffer;  // Pointer to array to be recorded to
  95:Src/main.c    **** uint8_t RECORD_ENABLE = 0;     // Recording control flag
  96:Src/main.c    **** arm_rfft_fast_instance_f32 S;
  97:Src/main.c    **** 
  98:Src/main.c    **** /* USER CODE END 0 */
  99:Src/main.c    **** 
 100:Src/main.c    **** /**
 101:Src/main.c    ****   * @brief  The application entry point.
 102:Src/main.c    ****   *
 103:Src/main.c    ****   * @retval None
 104:Src/main.c    ****   */
 105:Src/main.c    **** int main(void) {
 106:Src/main.c    ****   /* USER CODE BEGIN 1 */
 107:Src/main.c    ****   //__HAL_DBGMCU_UNFREEZE_IWDG();
 108:Src/main.c    ****   /* USER CODE END 1 */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* MCU
 111:Src/main.c    ****    * Configuration----------------------------------------------------------*/
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick.
 114:Src/main.c    ****    */
 115:Src/main.c    ****   HAL_Init();
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE BEGIN Init */
 118:Src/main.c    ****   /* USER CODE END Init */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Configure the system clock */
 121:Src/main.c    ****   SystemClock_Config();
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END SysInit */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Initialize all configured peripherals */
 128:Src/main.c    ****   MX_GPIO_Init();
 129:Src/main.c    ****   MX_SPI1_Init();
 130:Src/main.c    ****   MX_USART2_UART_Init();
 131:Src/main.c    ****   MX_I2S2_Init();
 132:Src/main.c    ****   MX_CRC_Init();
 133:Src/main.c    ****   MX_PDM2PCM_Init();
 134:Src/main.c    ****   /* USER CODE BEGIN 2 */
 135:Src/main.c    ****   arm_rfft_fast_init_f32(&S, PCM_BUF_SIZE);
 136:Src/main.c    **** 
 137:Src/main.c    ****   LOCK_ENABLE();
 138:Src/main.c    ****   // SPI2_NVIC_INIT();
 139:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, SPI1_NCS_PIN, GPIO_PIN_SET);
 140:Src/main.c    ****   RECORD_ENABLE = 1;  // Enable I2S reading
 141:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 142:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
 143:Src/main.c    **** 
 144:Src/main.c    ****   current_PCM_buffer = PCM_BUF_1;
 145:Src/main.c    ****   uint8_t open_lock_flag = 0;
ARM GAS  /tmp/ccD6RzjW.s 			page 4


 146:Src/main.c    ****   volatile float32_t maxmag;
 147:Src/main.c    ****   volatile uint32_t index;
 148:Src/main.c    ****   // float32_t testData[PCM_BUF_SIZE];
 149:Src/main.c    ****   // float32_t sinval;
 150:Src/main.c    **** 
 151:Src/main.c    ****   // for (uint32_t i = 0; i < PCM_BUF_SIZE; i++) {
 152:Src/main.c    ****   //   sinval = arm_sin_f32(i * 3);
 153:Src/main.c    ****   //   testData[i] = sinval;
 154:Src/main.c    ****   // }
 155:Src/main.c    **** 
 156:Src/main.c    ****   // arm_abs_f32(testData, testData, PCM_BUF_SIZE);
 157:Src/main.c    ****   // arm_rfft_fast_f32(&S, testData, fft_output_buffer, 0);
 158:Src/main.c    ****   // arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 159:Src/main.c    ****   // arm_max_f32(&(fft_mag_buffer[1]), PCM_BUF_SIZE - 1, &maxmag, &index);
 160:Src/main.c    ****   HAL_Delay(2000);
 161:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);  // ENABLE ME TO RECORD
 162:Src/main.c    ****   /* USER CODE END 2 */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* Infinite loop */
 165:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 166:Src/main.c    ****   uint16_t handshake[4] = {1000, 1100, 1200, 1300};
 167:Src/main.c    ****   uint16_t window[4] = {0, 0, 0, 0};
 168:Src/main.c    ****   while (1) {
 169:Src/main.c    ****     if (PCM_switch_flag != PCM_switch_prev) {
 170:Src/main.c    ****       PCM_switch_prev = PCM_switch_flag;
 171:Src/main.c    **** 
 172:Src/main.c    ****       for (uint16_t i = 0; i < PCM_BUF_SIZE; i++) {
 173:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 174:Src/main.c    ****       }
 175:Src/main.c    **** 
 176:Src/main.c    ****       // arm_rfft_fast_f32(&S, testData, fft_output_buffer, 0);
 177:Src/main.c    ****       // arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 178:Src/main.c    ****       // arm_max_f32(&(fft_mag_buffer[1]), PCM_BUF_SIZE - 1, &maxmag, &index);
 179:Src/main.c    **** 
 180:Src/main.c    ****       arm_rfft_fast_f32(&S, fft_input_buffer, fft_output_buffer, 0);
 181:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE);
 182:Src/main.c    ****       arm_max_f32(&(fft_mag_buffer[1]), PCM_BUF_SIZE - 1, &maxmag, &index);
 183:Src/main.c    **** 
 184:Src/main.c    ****       // HAL_UART_Transmit(&huart2, handshake, 4 * 2, 100);
 185:Src/main.c    ****       // HAL_UART_Transmit(&huart2, PCM_BUF_1, PCM_BUF_SIZE * 2, 5000);
 186:Src/main.c    ****       // HAL_UART_Transmit(&huart2, &index, 4, 100);
 187:Src/main.c    ****       // HAL_UART_Transmit(&huart2, &maxmag, 4, 100);
 188:Src/main.c    **** 
 189:Src/main.c    ****       if (maxmag > 50) {
 190:Src/main.c    ****         if ((index > 98) && (index < 101)) {
 191:Src/main.c    ****           HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET);
 192:Src/main.c    ****           open_lock_flag = 1;
 193:Src/main.c    ****         }
 194:Src/main.c    ****       }
 195:Src/main.c    ****       if (open_lock_flag == 0) {
 196:Src/main.c    ****         RECORD_ENABLE = 1;
 197:Src/main.c    ****         HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 198:Src/main.c    ****         HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 199:Src/main.c    ****       }
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
 202:Src/main.c    ****     if (RECORD_ENABLE == 0) {
ARM GAS  /tmp/ccD6RzjW.s 			page 5


 203:Src/main.c    ****       HAL_Delay(150);
 204:Src/main.c    ****       HAL_GPIO_TogglePin(LED_PORT, LED4_PIN);
 205:Src/main.c    ****     }
 206:Src/main.c    **** 
 207:Src/main.c    ****     /* USER CODE END WHILE */
 208:Src/main.c    **** 
 209:Src/main.c    ****     /* USER CODE BEGIN 3 */
 210:Src/main.c    ****   }
 211:Src/main.c    ****   /* USER CODE END 3 */
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** /**
 215:Src/main.c    ****   * @brief System Clock Configuration
 216:Src/main.c    ****   * @retval None
 217:Src/main.c    ****   */
 218:Src/main.c    **** void SystemClock_Config(void) {
  28              		.loc 1 218 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 96
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 99B0     		sub	sp, sp, #100
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 112
  41              	.LBB18:
 219:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 220:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 221:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 222:Src/main.c    **** 
 223:Src/main.c    ****   /**Configure the main internal regulator output voltage
 224:Src/main.c    ****   */
 225:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
  42              		.loc 1 225 0
  43 0004 0023     		movs	r3, #0
  44 0006 2B4A     		ldr	r2, .L8
  45 0008 0193     		str	r3, [sp, #4]
  46 000a 116C     		ldr	r1, [r2, #64]
  47 000c 41F08051 		orr	r1, r1, #268435456
  48 0010 1164     		str	r1, [r2, #64]
  49 0012 126C     		ldr	r2, [r2, #64]
  50 0014 02F08052 		and	r2, r2, #268435456
  51 0018 0192     		str	r2, [sp, #4]
  52 001a 019A     		ldr	r2, [sp, #4]
  53              	.LBE18:
  54              	.LBB19:
 226:Src/main.c    **** 
 227:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  55              		.loc 1 227 0
  56 001c 264A     		ldr	r2, .L8+4
  57 001e 0293     		str	r3, [sp, #8]
  58 0020 1168     		ldr	r1, [r2]
  59 0022 41F48041 		orr	r1, r1, #16384
ARM GAS  /tmp/ccD6RzjW.s 			page 6


  60 0026 1160     		str	r1, [r2]
  61 0028 1268     		ldr	r2, [r2]
  62              	.LBE19:
 228:Src/main.c    **** 
 229:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 230:Src/main.c    ****   */
 231:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  63              		.loc 1 231 0
  64 002a 0224     		movs	r4, #2
  65              	.LBB20:
 227:Src/main.c    **** 
  66              		.loc 1 227 0
  67 002c 02F48042 		and	r2, r2, #16384
  68 0030 0292     		str	r2, [sp, #8]
  69              	.LBE20:
 232:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 233:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  70              		.loc 1 235 0
  71 0032 CDE91243 		strd	r4, r3, [sp, #72]
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 237:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
  72              		.loc 1 237 0
  73 0036 4FF4A873 		mov	r3, #336
  74              	.LBB21:
 227:Src/main.c    **** 
  75              		.loc 1 227 0
  76 003a 029A     		ldr	r2, [sp, #8]
  77              	.LBE21:
 231:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  78              		.loc 1 231 0
  79 003c 0C94     		str	r4, [sp, #48]
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  80              		.loc 1 233 0
  81 003e 1022     		movs	r2, #16
  82 0040 0125     		movs	r5, #1
 238:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  83              		.loc 1 238 0
  84 0042 CDE91534 		strd	r3, r4, [sp, #84]
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 240:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
  85              		.loc 1 240 0
  86 0046 0CA8     		add	r0, sp, #48
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
  87              		.loc 1 239 0
  88 0048 0723     		movs	r3, #7
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  89              		.loc 1 233 0
  90 004a CDE90F52 		strd	r5, r2, [sp, #60]
 236:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
  91              		.loc 1 236 0
  92 004e 1492     		str	r2, [sp, #80]
 239:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
  93              		.loc 1 239 0
  94 0050 1793     		str	r3, [sp, #92]
  95              		.loc 1 240 0
ARM GAS  /tmp/ccD6RzjW.s 			page 7


  96 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
  97              	.LVL0:
  98 0056 00B1     		cbz	r0, .L2
  99              	.L3:
 100 0058 FEE7     		b	.L3
 101              	.L2:
 241:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 242:Src/main.c    ****   }
 243:Src/main.c    **** 
 244:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 245:Src/main.c    ****   */
 246:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 102              		.loc 1 246 0
 103 005a 0F23     		movs	r3, #15
 247:Src/main.c    ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 248:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 104              		.loc 1 248 0
 105 005c CDE90734 		strd	r3, r4, [sp, #28]
 249:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 106              		.loc 1 249 0
 107 0060 0990     		str	r0, [sp, #36]
 250:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 251:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 108              		.loc 1 251 0
 109 0062 4FF4A052 		mov	r2, #5120
 110 0066 4FF48053 		mov	r3, #4096
 252:Src/main.c    **** 
 253:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 111              		.loc 1 253 0
 112 006a 0521     		movs	r1, #5
 113 006c 07A8     		add	r0, sp, #28
 251:Src/main.c    **** 
 114              		.loc 1 251 0
 115 006e CDE90A23 		strd	r2, r3, [sp, #40]
 116              		.loc 1 253 0
 117 0072 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 118              	.LVL1:
 119 0076 00B1     		cbz	r0, .L4
 120              	.L5:
 121 0078 FEE7     		b	.L5
 122              	.L4:
 254:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 255:Src/main.c    ****   }
 256:Src/main.c    **** 
 257:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 258:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 123              		.loc 1 258 0
 124 007a C023     		movs	r3, #192
 259:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 260:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 125              		.loc 1 260 0
 126 007c 03A8     		add	r0, sp, #12
 259:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 127              		.loc 1 259 0
 128 007e CDE90434 		strd	r3, r4, [sp, #16]
 257:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 129              		.loc 1 257 0
ARM GAS  /tmp/ccD6RzjW.s 			page 8


 130 0082 0395     		str	r5, [sp, #12]
 131              		.loc 1 260 0
 132 0084 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 133              	.LVL2:
 134 0088 0446     		mov	r4, r0
 135 008a 00B1     		cbz	r0, .L6
 136              	.L7:
 137 008c FEE7     		b	.L7
 138              	.L6:
 261:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 262:Src/main.c    ****   }
 263:Src/main.c    **** 
 264:Src/main.c    ****   /**Configure the Systick interrupt time
 265:Src/main.c    ****   */
 266:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 139              		.loc 1 266 0
 140 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 141              	.LVL3:
 142 0092 4FF47A73 		mov	r3, #1000
 143 0096 B0FBF3F0 		udiv	r0, r0, r3
 144 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
 145              	.LVL4:
 267:Src/main.c    **** 
 268:Src/main.c    ****   /**Configure the Systick
 269:Src/main.c    ****   */
 270:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 146              		.loc 1 270 0
 147 009e 0420     		movs	r0, #4
 148 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 149              	.LVL5:
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 273:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 150              		.loc 1 273 0
 151 00a4 2246     		mov	r2, r4
 152 00a6 2146     		mov	r1, r4
 153 00a8 4FF0FF30 		mov	r0, #-1
 154 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 155              	.LVL6:
 274:Src/main.c    **** }
 156              		.loc 1 274 0
 157 00b0 19B0     		add	sp, sp, #100
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 12
 160              		@ sp needed
 161 00b2 30BD     		pop	{r4, r5, pc}
 162              	.L9:
 163              		.align	2
 164              	.L8:
 165 00b4 00380240 		.word	1073887232
 166 00b8 00700040 		.word	1073770496
 167              		.cfi_endproc
 168              	.LFE160:
 170              		.section	.text.startup.main,"ax",%progbits
 171              		.align	1
 172              		.global	main
 173              		.syntax unified
ARM GAS  /tmp/ccD6RzjW.s 			page 9


 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	main:
 179              	.LFB159:
 105:Src/main.c    ****   /* USER CODE BEGIN 1 */
 180              		.loc 1 105 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 48
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 185              	.LCFI3:
 186              		.cfi_def_cfa_offset 36
 187              		.cfi_offset 4, -36
 188              		.cfi_offset 5, -32
 189              		.cfi_offset 6, -28
 190              		.cfi_offset 7, -24
 191              		.cfi_offset 8, -20
 192              		.cfi_offset 9, -16
 193              		.cfi_offset 10, -12
 194              		.cfi_offset 11, -8
 195              		.cfi_offset 14, -4
 196 0004 8DB0     		sub	sp, sp, #52
 197              	.LCFI4:
 198              		.cfi_def_cfa_offset 88
 199              	.LBB39:
 200              	.LBB40:
 201              	.LBB41:
 275:Src/main.c    **** 
 276:Src/main.c    **** /* CRC init function */
 277:Src/main.c    **** static void MX_CRC_Init(void) {
 278:Src/main.c    ****   hcrc.Instance = CRC;
 279:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 280:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 281:Src/main.c    ****   }
 282:Src/main.c    **** 
 283:Src/main.c    ****   __HAL_CRC_DR_RESET(&hcrc);
 284:Src/main.c    **** }
 285:Src/main.c    **** 
 286:Src/main.c    **** /* I2S2 init function */
 287:Src/main.c    **** static void MX_I2S2_Init(void) {
 288:Src/main.c    ****   hi2s2.Instance = SPI2;
 289:Src/main.c    ****   hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 290:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
 291:Src/main.c    ****   hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 292:Src/main.c    ****   hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 293:Src/main.c    ****   hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 294:Src/main.c    ****   hi2s2.Init.CPOL = I2S_CPOL_LOW;
 295:Src/main.c    ****   hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 296:Src/main.c    ****   hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 297:Src/main.c    ****   if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 298:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 299:Src/main.c    ****   }
 300:Src/main.c    **** }
 301:Src/main.c    **** 
 302:Src/main.c    **** /* SPI1 init function */
 303:Src/main.c    **** static void MX_SPI1_Init(void) {
ARM GAS  /tmp/ccD6RzjW.s 			page 10


 304:Src/main.c    ****   /* SPI1 parameter configuration*/
 305:Src/main.c    ****   hspi1.Instance = SPI1;
 306:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 307:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 308:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 309:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 310:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 311:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 312:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 313:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 314:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 315:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 316:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 317:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 318:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 319:Src/main.c    ****   }
 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /* USART2 init function */
 323:Src/main.c    **** static void MX_USART2_UART_Init(void) {
 324:Src/main.c    ****   huart2.Instance = USART2;
 325:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 326:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 327:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 328:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 329:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 330:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 331:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 332:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK) {
 333:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 334:Src/main.c    ****   }
 335:Src/main.c    **** }
 336:Src/main.c    **** 
 337:Src/main.c    **** /** Configure pins as
 338:Src/main.c    ****         * Analog
 339:Src/main.c    ****         * Input
 340:Src/main.c    ****         * Output
 341:Src/main.c    ****         * EVENT_OUT
 342:Src/main.c    ****         * EXTI
 343:Src/main.c    ****      PA4   ------> I2S3_WS
 344:Src/main.c    **** */
 345:Src/main.c    **** static void MX_GPIO_Init(void) {
 346:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 347:Src/main.c    **** 
 348:Src/main.c    ****   /* GPIO Ports Clock Enable */
 349:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 202              		.loc 1 349 0
 203 0006 0024     		movs	r4, #0
 204              	.LBE41:
 205              	.LBE40:
 206              	.LBE39:
 115:Src/main.c    **** 
 207              		.loc 1 115 0
 208 0008 FFF7FEFF 		bl	HAL_Init
 209              	.LVL7:
 121:Src/main.c    **** 
 210              		.loc 1 121 0
ARM GAS  /tmp/ccD6RzjW.s 			page 11


 211 000c FFF7FEFF 		bl	SystemClock_Config
 212              	.LVL8:
 213              	.LBB51:
 214              	.LBB50:
 215              	.LBB42:
 216              		.loc 1 349 0
 217 0010 AC4B     		ldr	r3, .L28
 218 0012 0194     		str	r4, [sp, #4]
 219 0014 1A6B     		ldr	r2, [r3, #48]
 220              	.LBE42:
 350:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 351:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 352:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 353:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 354:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 355:Src/main.c    **** 
 356:Src/main.c    ****   /*Configure GPIO pin Output Level */
 357:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 221              		.loc 1 357 0
 222 0016 AC48     		ldr	r0, .L28+4
 223              	.LBB43:
 349:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 224              		.loc 1 349 0
 225 0018 42F01002 		orr	r2, r2, #16
 226 001c 1A63     		str	r2, [r3, #48]
 227 001e 1A6B     		ldr	r2, [r3, #48]
 228 0020 02F01002 		and	r2, r2, #16
 229 0024 0192     		str	r2, [sp, #4]
 230 0026 019A     		ldr	r2, [sp, #4]
 231              	.LBE43:
 232              	.LBB44:
 350:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 233              		.loc 1 350 0
 234 0028 0294     		str	r4, [sp, #8]
 235 002a 1A6B     		ldr	r2, [r3, #48]
 236 002c 42F00402 		orr	r2, r2, #4
 237 0030 1A63     		str	r2, [r3, #48]
 238 0032 1A6B     		ldr	r2, [r3, #48]
 239 0034 02F00402 		and	r2, r2, #4
 240 0038 0292     		str	r2, [sp, #8]
 241 003a 029A     		ldr	r2, [sp, #8]
 242              	.LBE44:
 243              	.LBB45:
 351:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 244              		.loc 1 351 0
 245 003c 0394     		str	r4, [sp, #12]
 246 003e 1A6B     		ldr	r2, [r3, #48]
 247 0040 42F08002 		orr	r2, r2, #128
 248 0044 1A63     		str	r2, [r3, #48]
 249 0046 1A6B     		ldr	r2, [r3, #48]
 250 0048 02F08002 		and	r2, r2, #128
 251 004c 0392     		str	r2, [sp, #12]
 252 004e 039A     		ldr	r2, [sp, #12]
 253              	.LBE45:
 254              	.LBB46:
 352:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 255              		.loc 1 352 0
ARM GAS  /tmp/ccD6RzjW.s 			page 12


 256 0050 0494     		str	r4, [sp, #16]
 257 0052 1A6B     		ldr	r2, [r3, #48]
 258 0054 42F00102 		orr	r2, r2, #1
 259 0058 1A63     		str	r2, [r3, #48]
 260 005a 1A6B     		ldr	r2, [r3, #48]
 261 005c 02F00102 		and	r2, r2, #1
 262 0060 0492     		str	r2, [sp, #16]
 263 0062 049A     		ldr	r2, [sp, #16]
 264              	.LBE46:
 265              	.LBB47:
 353:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 266              		.loc 1 353 0
 267 0064 0594     		str	r4, [sp, #20]
 268 0066 1A6B     		ldr	r2, [r3, #48]
 269 0068 42F00202 		orr	r2, r2, #2
 270 006c 1A63     		str	r2, [r3, #48]
 271 006e 1A6B     		ldr	r2, [r3, #48]
 272 0070 02F00202 		and	r2, r2, #2
 273 0074 0592     		str	r2, [sp, #20]
 274 0076 059A     		ldr	r2, [sp, #20]
 275              	.LBE47:
 276              	.LBB48:
 354:Src/main.c    **** 
 277              		.loc 1 354 0
 278 0078 0694     		str	r4, [sp, #24]
 279 007a 1A6B     		ldr	r2, [r3, #48]
 280 007c 42F00802 		orr	r2, r2, #8
 281 0080 1A63     		str	r2, [r3, #48]
 282 0082 1B6B     		ldr	r3, [r3, #48]
 283 0084 03F00803 		and	r3, r3, #8
 284 0088 0693     		str	r3, [sp, #24]
 285              	.LBE48:
 286              		.loc 1 357 0
 287 008a 2246     		mov	r2, r4
 288 008c 0C21     		movs	r1, #12
 289              	.LBB49:
 354:Src/main.c    **** 
 290              		.loc 1 354 0
 291 008e 069B     		ldr	r3, [sp, #24]
 292              	.LBE49:
 293              		.loc 1 357 0
 294 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 295              	.LVL9:
 358:Src/main.c    **** 
 359:Src/main.c    ****   /*Configure GPIO pin Output Level */
 360:Src/main.c    ****   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 296              		.loc 1 360 0
 297 0094 0122     		movs	r2, #1
 298 0096 1146     		mov	r1, r2
 299 0098 8C48     		ldr	r0, .L28+8
 300 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 301              	.LVL10:
 361:Src/main.c    ****                     GPIO_PIN_SET);
 362:Src/main.c    **** 
 363:Src/main.c    ****   /*Configure GPIO pin Output Level */
 364:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 302              		.loc 1 364 0
ARM GAS  /tmp/ccD6RzjW.s 			page 13


 303 009e 2246     		mov	r2, r4
 304 00a0 4FF47041 		mov	r1, #61440
 305 00a4 8A48     		ldr	r0, .L28+12
 306 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 307              	.LVL11:
 365:Src/main.c    ****                     GPIO_PIN_RESET);
 366:Src/main.c    **** 
 367:Src/main.c    ****   /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin */
 368:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_2 | CS_I2C_SPI_Pin;
 369:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 308              		.loc 1 369 0
 309 00aa 0126     		movs	r6, #1
 370:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 371:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 372:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 310              		.loc 1 372 0
 311 00ac 07A9     		add	r1, sp, #28
 312 00ae 8648     		ldr	r0, .L28+4
 369:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 313              		.loc 1 369 0
 314 00b0 0C27     		movs	r7, #12
 315 00b2 CDE90776 		strd	r7, r6, [sp, #28]
 371:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 316              		.loc 1 371 0
 317 00b6 CDE90944 		strd	r4, r4, [sp, #36]
 318              		.loc 1 372 0
 319 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 320              	.LVL12:
 373:Src/main.c    **** 
 374:Src/main.c    ****   /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
 375:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 376:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 377:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 378:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 379:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 321              		.loc 1 379 0
 322 00be 07A9     		add	r1, sp, #28
 323 00c0 8248     		ldr	r0, .L28+8
 380:Src/main.c    **** 
 381:Src/main.c    ****   /*Configure GPIO pin : I2S3_WS_Pin */
 382:Src/main.c    ****   GPIO_InitStruct.Pin = I2S3_WS_Pin;
 383:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 324              		.loc 1 383 0
 325 00c2 4FF00208 		mov	r8, #2
 376:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 326              		.loc 1 376 0
 327 00c6 CDE90766 		strd	r6, r6, [sp, #28]
 378:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 328              		.loc 1 378 0
 329 00ca CDE90944 		strd	r4, r4, [sp, #36]
 379:Src/main.c    **** 
 330              		.loc 1 379 0
 331 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 332              	.LVL13:
 333              		.loc 1 383 0
 334 00d2 1023     		movs	r3, #16
 335 00d4 CDE90738 		strd	r3, r8, [sp, #28]
ARM GAS  /tmp/ccD6RzjW.s 			page 14


 384:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 385:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 386:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 387:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 336              		.loc 1 387 0
 337 00d8 07A9     		add	r1, sp, #28
 386:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 338              		.loc 1 386 0
 339 00da 0623     		movs	r3, #6
 340              		.loc 1 387 0
 341 00dc 7D48     		ldr	r0, .L28+16
 386:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 342              		.loc 1 386 0
 343 00de 0B93     		str	r3, [sp, #44]
 385:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 344              		.loc 1 385 0
 345 00e0 CDE90944 		strd	r4, r4, [sp, #36]
 388:Src/main.c    **** 
 389:Src/main.c    ****   /*Configure GPIO pin : BOOT1_Pin */
 390:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 346              		.loc 1 390 0
 347 00e4 0425     		movs	r5, #4
 387:Src/main.c    **** 
 348              		.loc 1 387 0
 349 00e6 FFF7FEFF 		bl	HAL_GPIO_Init
 350              	.LVL14:
 391:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 392:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 393:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 351              		.loc 1 393 0
 352 00ea 07A9     		add	r1, sp, #28
 353 00ec 7A48     		ldr	r0, .L28+20
 392:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 354              		.loc 1 392 0
 355 00ee 0994     		str	r4, [sp, #36]
 391:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 356              		.loc 1 391 0
 357 00f0 CDE90754 		strd	r5, r4, [sp, #28]
 358              		.loc 1 393 0
 359 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 360              	.LVL15:
 394:Src/main.c    **** 
 395:Src/main.c    ****   /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
 396:Src/main.c    ****   GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 361              		.loc 1 396 0
 362 00f8 4FF47043 		mov	r3, #61440
 397:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 398:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 399:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 400:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 363              		.loc 1 400 0
 364 00fc 07A9     		add	r1, sp, #28
 365 00fe 7448     		ldr	r0, .L28+12
 397:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 366              		.loc 1 397 0
 367 0100 CDE90736 		strd	r3, r6, [sp, #28]
 399:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
ARM GAS  /tmp/ccD6RzjW.s 			page 15


 368              		.loc 1 399 0
 369 0104 CDE90944 		strd	r4, r4, [sp, #36]
 370              		.loc 1 400 0
 371 0108 FFF7FEFF 		bl	HAL_GPIO_Init
 372              	.LVL16:
 401:Src/main.c    **** 
 402:Src/main.c    ****   /*Configure GPIO pin : MEMS_INT2_Pin */
 403:Src/main.c    ****   GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 404:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 373              		.loc 1 404 0
 374 010c 734B     		ldr	r3, .L28+24
 405:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 406:Src/main.c    ****   HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 375              		.loc 1 406 0
 376 010e 6E48     		ldr	r0, .L28+4
 403:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 377              		.loc 1 403 0
 378 0110 CDF81C80 		str	r8, [sp, #28]
 379              		.loc 1 406 0
 380 0114 07A9     		add	r1, sp, #28
 405:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 381              		.loc 1 405 0
 382 0116 CDE90834 		strd	r3, r4, [sp, #32]
 383              		.loc 1 406 0
 384 011a FFF7FEFF 		bl	HAL_GPIO_Init
 385              	.LVL17:
 386              	.LBE50:
 387              	.LBE51:
 388              	.LBB52:
 389              	.LBB53:
 305:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 390              		.loc 1 305 0
 391 011e 7048     		ldr	r0, .L28+28
 306:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 392              		.loc 1 306 0
 393 0120 DFF8FCC1 		ldr	ip, .L28+92
 315:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 394              		.loc 1 315 0
 395 0124 8462     		str	r4, [r0, #40]
 306:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 396              		.loc 1 306 0
 397 0126 4FF48273 		mov	r3, #260
 398 012a C0E900C3 		strd	ip, r3, [r0]
 311:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 399              		.loc 1 311 0
 400 012e 4FF40073 		mov	r3, #512
 312:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 401              		.loc 1 312 0
 402 0132 C0E90634 		strd	r3, r4, [r0, #24]
 316:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 403              		.loc 1 316 0
 404 0136 0A23     		movs	r3, #10
 308:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 405              		.loc 1 308 0
 406 0138 C0E90244 		strd	r4, r4, [r0, #8]
 310:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 407              		.loc 1 310 0
ARM GAS  /tmp/ccD6RzjW.s 			page 16


 408 013c C0E90444 		strd	r4, r4, [r0, #16]
 314:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 409              		.loc 1 314 0
 410 0140 C0E90844 		strd	r4, r4, [r0, #32]
 316:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 411              		.loc 1 316 0
 412 0144 C362     		str	r3, [r0, #44]
 317:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 413              		.loc 1 317 0
 414 0146 FFF7FEFF 		bl	HAL_SPI_Init
 415              	.LVL18:
 416 014a 00B1     		cbz	r0, .L11
 417              	.L12:
 418 014c FEE7     		b	.L12
 419              	.L11:
 420              	.LBE53:
 421              	.LBE52:
 422              	.LBB54:
 423              	.LBB55:
 324:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 424              		.loc 1 324 0
 425 014e 654B     		ldr	r3, .L28+32
 325:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 426              		.loc 1 325 0
 427 0150 6549     		ldr	r1, .L28+36
 428 0152 4FF4E132 		mov	r2, #115200
 327:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 429              		.loc 1 327 0
 430 0156 C3E90200 		strd	r0, r0, [r3, #8]
 329:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 431              		.loc 1 329 0
 432 015a C3E90407 		strd	r0, r7, [r3, #16]
 331:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK) {
 433              		.loc 1 331 0
 434 015e C3E90600 		strd	r0, r0, [r3, #24]
 332:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 435              		.loc 1 332 0
 436 0162 1846     		mov	r0, r3
 325:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 437              		.loc 1 325 0
 438 0164 C3E90012 		strd	r1, r2, [r3]
 332:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 439              		.loc 1 332 0
 440 0168 FFF7FEFF 		bl	HAL_UART_Init
 441              	.LVL19:
 442 016c 00B1     		cbz	r0, .L13
 443              	.L14:
 444 016e FEE7     		b	.L14
 445              	.L13:
 446              	.LBE55:
 447              	.LBE54:
 448              	.LBB56:
 449              	.LBB57:
 288:Src/main.c    ****   hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 450              		.loc 1 288 0
 451 0170 5E4C     		ldr	r4, .L28+40
 289:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
ARM GAS  /tmp/ccD6RzjW.s 			page 17


 452              		.loc 1 289 0
 453 0172 5F4A     		ldr	r2, .L28+44
 292:Src/main.c    ****   hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 454              		.loc 1 292 0
 455 0174 2061     		str	r0, [r4, #16]
 289:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
 456              		.loc 1 289 0
 457 0176 4FF44073 		mov	r3, #768
 458 017a C4E90023 		strd	r2, r3, [r4]
 290:Src/main.c    ****   hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 459              		.loc 1 290 0
 460 017e 2023     		movs	r3, #32
 291:Src/main.c    ****   hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 461              		.loc 1 291 0
 462 0180 C4E90230 		strd	r3, r0, [r4, #8]
 293:Src/main.c    ****   hi2s2.Init.CPOL = I2S_CPOL_LOW;
 463              		.loc 1 293 0
 464 0184 4FF4FA43 		mov	r3, #32000
 294:Src/main.c    ****   hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 465              		.loc 1 294 0
 466 0188 C4E90530 		strd	r3, r0, [r4, #20]
 296:Src/main.c    ****   if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 467              		.loc 1 296 0
 468 018c C4E90700 		strd	r0, r0, [r4, #28]
 297:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 469              		.loc 1 297 0
 470 0190 2046     		mov	r0, r4
 471 0192 FFF7FEFF 		bl	HAL_I2S_Init
 472              	.LVL20:
 473 0196 00B1     		cbz	r0, .L15
 474              	.L16:
 475 0198 FEE7     		b	.L16
 476              	.L15:
 477              	.LBE57:
 478              	.LBE56:
 479              	.LBB58:
 480              	.LBB59:
 278:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 481              		.loc 1 278 0
 482 019a 564F     		ldr	r7, .L28+48
 483 019c 564B     		ldr	r3, .L28+52
 484 019e 3B60     		str	r3, [r7]
 279:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 485              		.loc 1 279 0
 486 01a0 3846     		mov	r0, r7
 487 01a2 FFF7FEFF 		bl	HAL_CRC_Init
 488              	.LVL21:
 489 01a6 8046     		mov	r8, r0
 490 01a8 00B1     		cbz	r0, .L17
 491              	.L18:
 492 01aa FEE7     		b	.L18
 493              	.L17:
 283:Src/main.c    **** }
 494              		.loc 1 283 0
 495 01ac 3A68     		ldr	r2, [r7]
 496              	.LBE59:
 497              	.LBE58:
ARM GAS  /tmp/ccD6RzjW.s 			page 18


 142:Src/main.c    **** 
 498              		.loc 1 142 0
 499 01ae DFF874A1 		ldr	r10, .L28+96
 500              	.LBB62:
 501              	.LBB60:
 283:Src/main.c    **** }
 502              		.loc 1 283 0
 503 01b2 9368     		ldr	r3, [r2, #8]
 504              	.LBE60:
 505              	.LBE62:
 144:Src/main.c    ****   uint8_t open_lock_flag = 0;
 506              		.loc 1 144 0
 507 01b4 514F     		ldr	r7, .L28+56
 180:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE);
 508              		.loc 1 180 0
 509 01b6 DFF87091 		ldr	r9, .L28+100
 510 01ba DFF844B1 		ldr	fp, .L28+60
 511              	.LBB63:
 512              	.LBB61:
 283:Src/main.c    **** }
 513              		.loc 1 283 0
 514 01be 43F00103 		orr	r3, r3, #1
 515 01c2 9360     		str	r3, [r2, #8]
 516              	.LBE61:
 517              	.LBE63:
 133:Src/main.c    ****   /* USER CODE BEGIN 2 */
 518              		.loc 1 133 0
 519 01c4 FFF7FEFF 		bl	MX_PDM2PCM_Init
 520              	.LVL22:
 135:Src/main.c    **** 
 521              		.loc 1 135 0
 522 01c8 4FF40061 		mov	r1, #2048
 523 01cc 4C48     		ldr	r0, .L28+60
 524 01ce FFF7FEFF 		bl	arm_rfft_fast_init_f32
 525              	.LVL23:
 137:Src/main.c    ****   // SPI2_NVIC_INIT();
 526              		.loc 1 137 0
 527 01d2 3246     		mov	r2, r6
 528 01d4 2946     		mov	r1, r5
 529 01d6 3C48     		ldr	r0, .L28+4
 140:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 530              		.loc 1 140 0
 531 01d8 4A4D     		ldr	r5, .L28+64
 137:Src/main.c    ****   // SPI2_NVIC_INIT();
 532              		.loc 1 137 0
 533 01da FFF7FEFF 		bl	HAL_GPIO_WritePin
 534              	.LVL24:
 139:Src/main.c    ****   RECORD_ENABLE = 1;  // Enable I2S reading
 535              		.loc 1 139 0
 536 01de 3246     		mov	r2, r6
 537 01e0 4FF48071 		mov	r1, #256
 538 01e4 3848     		ldr	r0, .L28+4
 539 01e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 540              	.LVL25:
 141:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
 541              		.loc 1 141 0
 542 01ea 3246     		mov	r2, r6
ARM GAS  /tmp/ccD6RzjW.s 			page 19


 543 01ec 4FF40051 		mov	r1, #8192
 544 01f0 3748     		ldr	r0, .L28+12
 140:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 545              		.loc 1 140 0
 546 01f2 2E70     		strb	r6, [r5]
 141:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
 547              		.loc 1 141 0
 548 01f4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 549              	.LVL26:
 144:Src/main.c    ****   uint8_t open_lock_flag = 0;
 550              		.loc 1 144 0
 551 01f8 434B     		ldr	r3, .L28+68
 142:Src/main.c    **** 
 552              		.loc 1 142 0
 553 01fa 9AF80060 		ldrb	r6, [r10]	@ zero_extendqisi2
 554              	.LVL27:
 144:Src/main.c    ****   uint8_t open_lock_flag = 0;
 555              		.loc 1 144 0
 556 01fe 1F60     		str	r7, [r3]
 557              	.LVL28:
 160:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);  // ENABLE ME TO RECORD
 558              		.loc 1 160 0
 559 0200 4FF4FA60 		mov	r0, #2000
 560 0204 FFF7FEFF 		bl	HAL_Delay
 561              	.LVL29:
 161:Src/main.c    ****   /* USER CODE END 2 */
 562              		.loc 1 161 0
 563 0208 2046     		mov	r0, r4
 564 020a 4022     		movs	r2, #64
 565 020c 3F49     		ldr	r1, .L28+72
 566 020e FFF7FEFF 		bl	HAL_I2S_Receive_IT
 567              	.LVL30:
 145:Src/main.c    ****   volatile float32_t maxmag;
 568              		.loc 1 145 0
 569 0212 4446     		mov	r4, r8
 570              	.LVL31:
 571              	.L19:
 169:Src/main.c    ****       PCM_switch_prev = PCM_switch_flag;
 572              		.loc 1 169 0
 573 0214 9AF80080 		ldrb	r8, [r10]	@ zero_extendqisi2
 574 0218 B045     		cmp	r8, r6
 575 021a 50D0     		beq	.L25
 576 021c 3C4B     		ldr	r3, .L28+76
 577 021e 0026     		movs	r6, #0
 578              	.LVL32:
 579              	.L21:
 580              	.LBB64:
 173:Src/main.c    ****       }
 581              		.loc 1 173 0 discriminator 3
 582 0220 37F81620 		ldrh	r2, [r7, r6, lsl #1]
 583 0224 07EE902A 		vmov	s15, r2	@ int
 584 0228 0136     		adds	r6, r6, #1
 585              	.LVL33:
 586 022a F8EE677A 		vcvt.f32.u32	s15, s15
 172:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 587              		.loc 1 172 0 discriminator 3
 588 022e B6F5006F 		cmp	r6, #2048
ARM GAS  /tmp/ccD6RzjW.s 			page 20


 173:Src/main.c    ****       }
 589              		.loc 1 173 0 discriminator 3
 590 0232 E3EC017A 		vstmia.32	r3!, {s15}
 172:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 591              		.loc 1 172 0 discriminator 3
 592 0236 F3D1     		bne	.L21
 593              	.LBE64:
 180:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE);
 594              		.loc 1 180 0
 595 0238 0023     		movs	r3, #0
 596 023a 4A46     		mov	r2, r9
 597 023c 3449     		ldr	r1, .L28+76
 598 023e 5846     		mov	r0, fp
 599 0240 FFF7FEFF 		bl	arm_rfft_fast_f32
 600              	.LVL34:
 181:Src/main.c    ****       arm_max_f32(&(fft_mag_buffer[1]), PCM_BUF_SIZE - 1, &maxmag, &index);
 601              		.loc 1 181 0
 602 0244 3246     		mov	r2, r6
 603 0246 3349     		ldr	r1, .L28+80
 604 0248 4846     		mov	r0, r9
 605 024a FFF7FEFF 		bl	arm_cmplx_mag_f32
 606              	.LVL35:
 182:Src/main.c    **** 
 607              		.loc 1 182 0
 608 024e 07AB     		add	r3, sp, #28
 609 0250 6A46     		mov	r2, sp
 610 0252 40F2FF71 		movw	r1, #2047
 611 0256 3048     		ldr	r0, .L28+84
 612 0258 FFF7FEFF 		bl	arm_max_f32
 613              	.LVL36:
 189:Src/main.c    ****         if ((index > 98) && (index < 101)) {
 614              		.loc 1 189 0
 615 025c 9DED007A 		vldr.32	s14, [sp]
 616 0260 DFED2E7A 		vldr.32	s15, .L28+88
 617 0264 B4EEE77A 		vcmpe.f32	s14, s15
 618 0268 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 619 026c 18DD     		ble	.L22
 190:Src/main.c    ****           HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET);
 620              		.loc 1 190 0
 621 026e 079B     		ldr	r3, [sp, #28]
 622 0270 622B     		cmp	r3, #98
 623 0272 15D9     		bls	.L22
 190:Src/main.c    ****           HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET);
 624              		.loc 1 190 0 is_stmt 0 discriminator 1
 625 0274 079B     		ldr	r3, [sp, #28]
 626 0276 642B     		cmp	r3, #100
 627 0278 12D8     		bhi	.L22
 191:Src/main.c    ****           open_lock_flag = 1;
 628              		.loc 1 191 0 is_stmt 1
 629 027a 0122     		movs	r2, #1
 630 027c 4FF48041 		mov	r1, #16384
 631 0280 1348     		ldr	r0, .L28+12
 632 0282 FFF7FEFF 		bl	HAL_GPIO_WritePin
 633              	.LVL37:
 192:Src/main.c    ****         }
 634              		.loc 1 192 0
 635 0286 0124     		movs	r4, #1
ARM GAS  /tmp/ccD6RzjW.s 			page 21


 636              	.LVL38:
 637              	.L20:
 202:Src/main.c    ****       HAL_Delay(150);
 638              		.loc 1 202 0
 639 0288 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 640 028a 3BB9     		cbnz	r3, .L24
 203:Src/main.c    ****       HAL_GPIO_TogglePin(LED_PORT, LED4_PIN);
 641              		.loc 1 203 0
 642 028c 9620     		movs	r0, #150
 643 028e FFF7FEFF 		bl	HAL_Delay
 644              	.LVL39:
 204:Src/main.c    ****     }
 645              		.loc 1 204 0
 646 0292 4FF40041 		mov	r1, #32768
 647 0296 0E48     		ldr	r0, .L28+12
 648 0298 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 649              	.LVL40:
 650              	.L24:
 105:Src/main.c    ****   /* USER CODE BEGIN 1 */
 651              		.loc 1 105 0
 652 029c 4646     		mov	r6, r8
 653 029e B9E7     		b	.L19
 654              	.LVL41:
 655              	.L22:
 195:Src/main.c    ****         RECORD_ENABLE = 1;
 656              		.loc 1 195 0
 657 02a0 002C     		cmp	r4, #0
 658 02a2 F1D1     		bne	.L20
 196:Src/main.c    ****         HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 659              		.loc 1 196 0
 660 02a4 0122     		movs	r2, #1
 197:Src/main.c    ****         HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 661              		.loc 1 197 0
 662 02a6 4FF40051 		mov	r1, #8192
 663 02aa 0948     		ldr	r0, .L28+12
 196:Src/main.c    ****         HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 664              		.loc 1 196 0
 665 02ac 2A70     		strb	r2, [r5]
 197:Src/main.c    ****         HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 666              		.loc 1 197 0
 667 02ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 668              	.LVL42:
 198:Src/main.c    ****       }
 669              		.loc 1 198 0
 670 02b2 4022     		movs	r2, #64
 671 02b4 1549     		ldr	r1, .L28+72
 672 02b6 0D48     		ldr	r0, .L28+40
 673 02b8 FFF7FEFF 		bl	HAL_I2S_Receive_IT
 674              	.LVL43:
 675 02bc E4E7     		b	.L20
 676              	.LVL44:
 677              	.L25:
 678 02be B046     		mov	r8, r6
 679 02c0 E2E7     		b	.L20
 680              	.L29:
 681 02c2 00BF     		.align	2
 682              	.L28:
ARM GAS  /tmp/ccD6RzjW.s 			page 22


 683 02c4 00380240 		.word	1073887232
 684 02c8 00100240 		.word	1073876992
 685 02cc 00080240 		.word	1073874944
 686 02d0 000C0240 		.word	1073875968
 687 02d4 00000240 		.word	1073872896
 688 02d8 00040240 		.word	1073873920
 689 02dc 00001210 		.word	269615104
 690 02e0 00000000 		.word	hspi1
 691 02e4 00000000 		.word	huart2
 692 02e8 00440040 		.word	1073759232
 693 02ec 00000000 		.word	hi2s2
 694 02f0 00380040 		.word	1073756160
 695 02f4 00000000 		.word	hcrc
 696 02f8 00300240 		.word	1073885184
 697 02fc 00000000 		.word	PCM_BUF_1
 698 0300 00000000 		.word	S
 699 0304 00000000 		.word	.LANCHOR0
 700 0308 00000000 		.word	current_PCM_buffer
 701 030c 00000000 		.word	PDM_BUF_1
 702 0310 00000000 		.word	fft_input_buffer
 703 0314 00000000 		.word	fft_mag_buffer
 704 0318 04000000 		.word	fft_mag_buffer+4
 705 031c 00004842 		.word	1112014848
 706 0320 00300140 		.word	1073819648
 707 0324 00000000 		.word	.LANCHOR1
 708 0328 00000000 		.word	fft_output_buffer
 709              		.cfi_endproc
 710              	.LFE159:
 712              		.section	.text.HAL_I2S_RxCpltCallback,"ax",%progbits
 713              		.align	1
 714              		.global	HAL_I2S_RxCpltCallback
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 718              		.fpu fpv4-sp-d16
 720              	HAL_I2S_RxCpltCallback:
 721              	.LFB166:
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /* USER CODE BEGIN 4 */
 410:Src/main.c    **** 
 411:Src/main.c    **** void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 722              		.loc 1 411 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              	.LVL45:
 727 0000 38B5     		push	{r3, r4, r5, lr}
 728              	.LCFI5:
 729              		.cfi_def_cfa_offset 16
 730              		.cfi_offset 3, -16
 731              		.cfi_offset 4, -12
 732              		.cfi_offset 5, -8
 733              		.cfi_offset 14, -4
 412:Src/main.c    ****   PDM_Filter(PDM_BUF_1, &PCM_BUF_1[local_pcm_pointer], &PDM1_filter_handler);
 734              		.loc 1 412 0
 735 0002 194C     		ldr	r4, .L36
ARM GAS  /tmp/ccD6RzjW.s 			page 23


 736 0004 194B     		ldr	r3, .L36+4
 737 0006 2168     		ldr	r1, [r4]
 738 0008 194A     		ldr	r2, .L36+8
 739 000a 1A48     		ldr	r0, .L36+12
 740              	.LVL46:
 741 000c 1A4D     		ldr	r5, .L36+16
 742 000e 03EB4101 		add	r1, r3, r1, lsl #1
 743 0012 FFF7FEFF 		bl	PDM_Filter
 744              	.LVL47:
 413:Src/main.c    **** 
 414:Src/main.c    ****   // for (uint8_t i = 0; i < 16; i++) {
 415:Src/main.c    ****   //   fft_input_buffer[local_pcm_pointer + i] =
 416:Src/main.c    ****   //       (float32_t)current_PCM_buffer[local_pcm_pointer + i];
 417:Src/main.c    ****   // }
 418:Src/main.c    **** 
 419:Src/main.c    ****   local_pcm_pointer = local_pcm_pointer + 16;  // The filter returns 16 samples
 745              		.loc 1 419 0
 746 0016 2368     		ldr	r3, [r4]
 747 0018 1033     		adds	r3, r3, #16
 420:Src/main.c    ****   if (local_pcm_pointer == PCM_BUF_SIZE) {
 748              		.loc 1 420 0
 749 001a B3F5006F 		cmp	r3, #2048
 750 001e 11D0     		beq	.L31
 419:Src/main.c    ****   if (local_pcm_pointer == PCM_BUF_SIZE) {
 751              		.loc 1 419 0
 752 0020 2360     		str	r3, [r4]
 753              	.L32:
 421:Src/main.c    ****     local_pcm_pointer = 0;
 422:Src/main.c    ****     RECORD_ENABLE = 0;
 423:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, LED2_PIN, GPIO_PIN_RESET);
 424:Src/main.c    ****     PCM_switch_flag ^= 1;
 425:Src/main.c    ****     // if (PCM_switch_flag == 1) {
 426:Src/main.c    ****     //   current_PCM_buffer = PCM_BUF_2;
 427:Src/main.c    ****     // } else {
 428:Src/main.c    ****     //   current_PCM_buffer = PCM_BUF_1;
 429:Src/main.c    ****     // }
 430:Src/main.c    ****   }
 431:Src/main.c    ****   if (RECORD_ENABLE == 1) {
 754              		.loc 1 431 0
 755 0022 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 756 0024 012C     		cmp	r4, #1
 757 0026 1DD1     		bne	.L30
 758              	.LBB65:
 432:Src/main.c    ****     HAL_StatusTypeDef result;
 433:Src/main.c    ****     result = HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, DECIMATION_FACTOR);
 759              		.loc 1 433 0
 760 0028 4022     		movs	r2, #64
 761 002a 1249     		ldr	r1, .L36+12
 762 002c 1348     		ldr	r0, .L36+20
 763 002e FFF7FEFF 		bl	HAL_I2S_Receive_IT
 764              	.LVL48:
 434:Src/main.c    **** 
 435:Src/main.c    ****     if (result == HAL_OK) {
 765              		.loc 1 435 0
 766 0032 A8B9     		cbnz	r0, .L34
 436:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, LED2_PIN, GPIO_PIN_SET);
 767              		.loc 1 436 0
ARM GAS  /tmp/ccD6RzjW.s 			page 24


 768 0034 2246     		mov	r2, r4
 769              	.L35:
 437:Src/main.c    ****     } else {
 438:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, LED2_PIN, GPIO_PIN_RESET);
 770              		.loc 1 438 0
 771 0036 4FF40051 		mov	r1, #8192
 772 003a 1148     		ldr	r0, .L36+24
 773              	.LVL49:
 774              	.LBE65:
 439:Src/main.c    ****     }
 440:Src/main.c    ****   }
 441:Src/main.c    ****   // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 442:Src/main.c    ****   // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);
 443:Src/main.c    **** }
 775              		.loc 1 443 0
 776 003c BDE83840 		pop	{r3, r4, r5, lr}
 777              	.LCFI6:
 778              		.cfi_remember_state
 779              		.cfi_restore 14
 780              		.cfi_restore 5
 781              		.cfi_restore 4
 782              		.cfi_restore 3
 783              		.cfi_def_cfa_offset 0
 784              	.LBB66:
 438:Src/main.c    ****     }
 785              		.loc 1 438 0
 786 0040 FFF7FEBF 		b	HAL_GPIO_WritePin
 787              	.LVL50:
 788              	.L31:
 789              	.LCFI7:
 790              		.cfi_restore_state
 791              	.LBE66:
 421:Src/main.c    ****     RECORD_ENABLE = 0;
 792              		.loc 1 421 0
 793 0044 0022     		movs	r2, #0
 423:Src/main.c    ****     PCM_switch_flag ^= 1;
 794              		.loc 1 423 0
 795 0046 4FF40051 		mov	r1, #8192
 796 004a 0D48     		ldr	r0, .L36+24
 421:Src/main.c    ****     RECORD_ENABLE = 0;
 797              		.loc 1 421 0
 798 004c 2260     		str	r2, [r4]
 422:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, LED2_PIN, GPIO_PIN_RESET);
 799              		.loc 1 422 0
 800 004e 2A70     		strb	r2, [r5]
 423:Src/main.c    ****     PCM_switch_flag ^= 1;
 801              		.loc 1 423 0
 802 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 803              	.LVL51:
 424:Src/main.c    ****     // if (PCM_switch_flag == 1) {
 804              		.loc 1 424 0
 805 0054 0B4A     		ldr	r2, .L36+28
 806 0056 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 807 0058 83F00103 		eor	r3, r3, #1
 808 005c 1370     		strb	r3, [r2]
 809 005e E0E7     		b	.L32
 810              	.LVL52:
ARM GAS  /tmp/ccD6RzjW.s 			page 25


 811              	.L34:
 812              	.LBB67:
 438:Src/main.c    ****     }
 813              		.loc 1 438 0
 814 0060 0022     		movs	r2, #0
 815 0062 E8E7     		b	.L35
 816              	.LVL53:
 817              	.L30:
 818              	.LBE67:
 819              		.loc 1 443 0
 820 0064 38BD     		pop	{r3, r4, r5, pc}
 821              	.L37:
 822 0066 00BF     		.align	2
 823              	.L36:
 824 0068 00000000 		.word	.LANCHOR2
 825 006c 00000000 		.word	PCM_BUF_1
 826 0070 00000000 		.word	PDM1_filter_handler
 827 0074 00000000 		.word	PDM_BUF_1
 828 0078 00000000 		.word	.LANCHOR0
 829 007c 00000000 		.word	hi2s2
 830 0080 000C0240 		.word	1073875968
 831 0084 00000000 		.word	.LANCHOR1
 832              		.cfi_endproc
 833              	.LFE166:
 835              		.section	.text._Error_Handler,"ax",%progbits
 836              		.align	1
 837              		.global	_Error_Handler
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu fpv4-sp-d16
 843              	_Error_Handler:
 844              	.LFB167:
 444:Src/main.c    **** 
 445:Src/main.c    **** /* USER CODE END 4 */
 446:Src/main.c    **** 
 447:Src/main.c    **** /**
 448:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 449:Src/main.c    ****   * @param  file: The file name as string.
 450:Src/main.c    ****   * @param  line: The line in file as a number.
 451:Src/main.c    ****   * @retval None
 452:Src/main.c    ****   */
 453:Src/main.c    **** void _Error_Handler(char *file, int line) {
 845              		.loc 1 453 0
 846              		.cfi_startproc
 847              		@ Volatile: function does not return.
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 851              	.LVL54:
 852              	.L39:
 853 0000 FEE7     		b	.L39
 854              		.cfi_endproc
 855              	.LFE167:
 857              		.comm	S,24,4
 858              		.global	RECORD_ENABLE
 859              		.comm	current_PCM_buffer,4,4
ARM GAS  /tmp/ccD6RzjW.s 			page 26


 860              		.global	PCM_switch_flag
 861              		.global	local_pcm_pointer
 862              		.comm	fft_mag_buffer,8192,4
 863              		.comm	fft_input_buffer,8192,4
 864              		.comm	fft_output_buffer,16384,4
 865              		.comm	PCM_BUF_2,4096,2
 866              		.comm	PCM_BUF_1,4096,2
 867              		.comm	PDM_BUF_1,128,2
 868              		.comm	huart2,64,4
 869              		.comm	hspi1,88,4
 870              		.comm	hi2s2,72,4
 871              		.comm	hcrc,8,4
 872              		.section	.bss.PCM_switch_flag,"aw",%nobits
 873              		.set	.LANCHOR1,. + 0
 876              	PCM_switch_flag:
 877 0000 00       		.space	1
 878              		.section	.bss.RECORD_ENABLE,"aw",%nobits
 879              		.set	.LANCHOR0,. + 0
 882              	RECORD_ENABLE:
 883 0000 00       		.space	1
 884              		.section	.bss.local_pcm_pointer,"aw",%nobits
 885              		.align	2
 886              		.set	.LANCHOR2,. + 0
 889              	local_pcm_pointer:
 890 0000 00000000 		.space	4
 891              		.text
 892              	.Letext0:
 893              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 894              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 895              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 896              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 897              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 898              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 899              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 900              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 901              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 902              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 903              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 904              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 905              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 906              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 907              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 908              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 909              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 910              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 911              		.file 20 "Middlewares/ST/STM32_Audio/Addons/PDM/Inc/pdm2pcm_glo.h"
 912              		.file 21 "Inc/pdm2pcm.h"
 913              		.file 22 "/usr/arm-none-eabi/include/math.h"
 914              		.file 23 "Drivers/CMSIS/Include/arm_math.h"
 915              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 916              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccD6RzjW.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccD6RzjW.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccD6RzjW.s:25     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccD6RzjW.s:165    .text.SystemClock_Config:00000000000000b4 $d
     /tmp/ccD6RzjW.s:171    .text.startup.main:0000000000000000 $t
     /tmp/ccD6RzjW.s:178    .text.startup.main:0000000000000000 main
     /tmp/ccD6RzjW.s:683    .text.startup.main:00000000000002c4 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:0000000000000040 huart2
                            *COM*:0000000000000048 hi2s2
                            *COM*:0000000000000008 hcrc
                            *COM*:0000000000001000 PCM_BUF_1
                            *COM*:0000000000000018 S
                            *COM*:0000000000000004 current_PCM_buffer
                            *COM*:0000000000000080 PDM_BUF_1
                            *COM*:0000000000002000 fft_input_buffer
                            *COM*:0000000000002000 fft_mag_buffer
                            *COM*:0000000000004000 fft_output_buffer
     /tmp/ccD6RzjW.s:713    .text.HAL_I2S_RxCpltCallback:0000000000000000 $t
     /tmp/ccD6RzjW.s:720    .text.HAL_I2S_RxCpltCallback:0000000000000000 HAL_I2S_RxCpltCallback
     /tmp/ccD6RzjW.s:824    .text.HAL_I2S_RxCpltCallback:0000000000000068 $d
     /tmp/ccD6RzjW.s:836    .text._Error_Handler:0000000000000000 $t
     /tmp/ccD6RzjW.s:843    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccD6RzjW.s:882    .bss.RECORD_ENABLE:0000000000000000 RECORD_ENABLE
     /tmp/ccD6RzjW.s:876    .bss.PCM_switch_flag:0000000000000000 PCM_switch_flag
     /tmp/ccD6RzjW.s:889    .bss.local_pcm_pointer:0000000000000000 local_pcm_pointer
                            *COM*:0000000000001000 PCM_BUF_2
     /tmp/ccD6RzjW.s:877    .bss.PCM_switch_flag:0000000000000000 $d
     /tmp/ccD6RzjW.s:883    .bss.RECORD_ENABLE:0000000000000000 $d
     /tmp/ccD6RzjW.s:885    .bss.local_pcm_pointer:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_I2S_Init
HAL_CRC_Init
MX_PDM2PCM_Init
arm_rfft_fast_init_f32
HAL_Delay
HAL_I2S_Receive_IT
arm_rfft_fast_f32
arm_cmplx_mag_f32
arm_max_f32
HAL_GPIO_TogglePin
PDM_Filter
PDM1_filter_handler
ARM GAS  /tmp/ccD6RzjW.s 			page 28


