ARM GAS  /tmp/ccfK243l.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemClock_Config:
  26              	.LFB160:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
ARM GAS  /tmp/ccfK243l.s 			page 2


  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "pdm2pcm.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "arm_math.h"
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CRC_HandleTypeDef hcrc;
  60:Src/main.c    **** 
  61:Src/main.c    **** I2S_HandleTypeDef hi2s2;
  62:Src/main.c    **** 
  63:Src/main.c    **** SPI_HandleTypeDef hspi1;
  64:Src/main.c    **** 
  65:Src/main.c    **** UART_HandleTypeDef huart2;
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN PV */
  68:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PV */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** static void MX_GPIO_Init(void);
  75:Src/main.c    **** static void MX_SPI1_Init(void);
  76:Src/main.c    **** static void MX_USART2_UART_Init(void);
  77:Src/main.c    **** static void MX_I2S2_Init(void);
  78:Src/main.c    **** static void MX_CRC_Init(void);
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  82:Src/main.c    **** // static void SPI2_NVIC_INIT(void);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE BEGIN 0 */
  86:Src/main.c    **** uint16_t PDM_BUF_1[64];            // PDM buffer1
  87:Src/main.c    **** uint16_t PDM_BUF_2[PDM_BUF_SIZE];  // PDM buffer2
  88:Src/main.c    **** uint16_t PCM_BUF_1[PCM_BUF_SIZE];  // PCM buffer1
ARM GAS  /tmp/ccfK243l.s 			page 3


  89:Src/main.c    **** uint16_t PCM_BUF_2[PCM_BUF_SIZE];  // PCM buffer2
  90:Src/main.c    **** float32_t fft_output_buffer[PCM_BUF_SIZE * 2];
  91:Src/main.c    **** float32_t fft_input_buffer[PCM_BUF_SIZE];
  92:Src/main.c    **** float32_t fft_mag_buffer[PCM_BUF_SIZE * 2];
  93:Src/main.c    **** uint32_t local_pcm_pointer = 0;  // Keeps track of PCM buffer
  94:Src/main.c    **** uint8_t PDM_complete_flag = 0;   // The flags indicate which buffer is in use
  95:Src/main.c    **** uint8_t PCM_switch_flag = 0;
  96:Src/main.c    **** uint16_t *current_PDM_buffer;  // Pointer to array to be recorded to
  97:Src/main.c    **** uint16_t *current_PCM_buffer;
  98:Src/main.c    **** uint8_t RECORD_ENABLE = 0;  // Recording control flag
  99:Src/main.c    **** arm_rfft_fast_instance_f32 S;
 100:Src/main.c    **** 
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   *
 106:Src/main.c    ****   * @retval None
 107:Src/main.c    ****   */
 108:Src/main.c    **** int main(void) {
 109:Src/main.c    ****   /* USER CODE BEGIN 1 */
 110:Src/main.c    ****   //__HAL_DBGMCU_UNFREEZE_IWDG();
 111:Src/main.c    ****   /* USER CODE END 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* MCU
 114:Src/main.c    ****    * Configuration----------------------------------------------------------*/
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick.
 117:Src/main.c    ****    */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    ****   /* USER CODE END Init */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Configure the system clock */
 124:Src/main.c    ****   SystemClock_Config();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END SysInit */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Initialize all configured peripherals */
 131:Src/main.c    ****   MX_GPIO_Init();
 132:Src/main.c    ****   MX_SPI1_Init();
 133:Src/main.c    ****   MX_USART2_UART_Init();
 134:Src/main.c    ****   MX_I2S2_Init();
 135:Src/main.c    ****   MX_CRC_Init();
 136:Src/main.c    ****   MX_PDM2PCM_Init();
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 138:Src/main.c    ****   arm_rfft_fast_init_f32(&S, PCM_BUF_SIZE * 2);
 139:Src/main.c    **** 
 140:Src/main.c    ****   LOCK_ENABLE();
 141:Src/main.c    ****   // SPI2_NVIC_INIT();
 142:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, SPI1_NCS_PIN, GPIO_PIN_SET);
 143:Src/main.c    ****   RECORD_ENABLE = 1;  // Enable I2S reading
 144:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 145:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
ARM GAS  /tmp/ccfK243l.s 			page 4


 146:Src/main.c    ****   // uint8_t PDM_switch_prev = PDM_complete_flag;
 147:Src/main.c    ****   current_PCM_buffer = PCM_BUF_1;
 148:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 149:Src/main.c    ****   /* USER CODE END 2 */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Infinite loop */
 152:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 153:Src/main.c    **** 
 154:Src/main.c    ****   while (1) {
 155:Src/main.c    ****     if (PCM_switch_flag != PCM_switch_prev) {
 156:Src/main.c    ****       PCM_switch_prev = PCM_switch_flag;
 157:Src/main.c    **** 
 158:Src/main.c    ****       for (uint16_t i = 0; i < PCM_BUF_SIZE; i++) {
 159:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 160:Src/main.c    ****       }
 161:Src/main.c    **** 
 162:Src/main.c    ****       arm_rfft_fast_f32(&S, fft_input_buffer, fft_output_buffer, 0);
 163:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 164:Src/main.c    ****       volatile float32_t maxmag;
 165:Src/main.c    ****       volatile uint32_t index;
 166:Src/main.c    ****       arm_max_f32(&(fft_mag_buffer[1]), PCM_BUF_SIZE * 2, &maxmag, &index);
 167:Src/main.c    ****       HAL_UART_Transmit(&huart2, PCM_BUF_1, PCM_BUF_SIZE * 2, 5000);
 168:Src/main.c    ****       HAL_UART_Transmit(&huart2, &index, 4, 100);
 169:Src/main.c    ****     }
 170:Src/main.c    **** 
 171:Src/main.c    ****     if (RECORD_ENABLE == 0) {
 172:Src/main.c    ****       HAL_Delay(150);
 173:Src/main.c    ****       HAL_GPIO_TogglePin(LED_PORT, LED4_PIN);
 174:Src/main.c    ****     }
 175:Src/main.c    **** 
 176:Src/main.c    ****     /* USER CODE END WHILE */
 177:Src/main.c    **** 
 178:Src/main.c    ****     /* USER CODE BEGIN 3 */
 179:Src/main.c    ****   }
 180:Src/main.c    ****   /* USER CODE END 3 */
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** /**
 184:Src/main.c    ****   * @brief System Clock Configuration
 185:Src/main.c    ****   * @retval None
 186:Src/main.c    ****   */
 187:Src/main.c    **** void SystemClock_Config(void) {
  28              		.loc 1 187 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 96
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 99B0     		sub	sp, sp, #100
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 112
  41              	.LBB18:
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /tmp/ccfK243l.s 			page 5


 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 190:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 191:Src/main.c    **** 
 192:Src/main.c    ****   /**Configure the main internal regulator output voltage
 193:Src/main.c    ****   */
 194:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
  42              		.loc 1 194 0
  43 0004 0023     		movs	r3, #0
  44 0006 2B4A     		ldr	r2, .L8
  45 0008 0193     		str	r3, [sp, #4]
  46 000a 116C     		ldr	r1, [r2, #64]
  47 000c 41F08051 		orr	r1, r1, #268435456
  48 0010 1164     		str	r1, [r2, #64]
  49 0012 126C     		ldr	r2, [r2, #64]
  50 0014 02F08052 		and	r2, r2, #268435456
  51 0018 0192     		str	r2, [sp, #4]
  52 001a 019A     		ldr	r2, [sp, #4]
  53              	.LBE18:
  54              	.LBB19:
 195:Src/main.c    **** 
 196:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  55              		.loc 1 196 0
  56 001c 264A     		ldr	r2, .L8+4
  57 001e 0293     		str	r3, [sp, #8]
  58 0020 1168     		ldr	r1, [r2]
  59 0022 41F48041 		orr	r1, r1, #16384
  60 0026 1160     		str	r1, [r2]
  61 0028 1268     		ldr	r2, [r2]
  62              	.LBE19:
 197:Src/main.c    **** 
 198:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 199:Src/main.c    ****   */
 200:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  63              		.loc 1 200 0
  64 002a 0224     		movs	r4, #2
  65              	.LBB20:
 196:Src/main.c    **** 
  66              		.loc 1 196 0
  67 002c 02F48042 		and	r2, r2, #16384
  68 0030 0292     		str	r2, [sp, #8]
  69              	.LBE20:
 201:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 202:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  70              		.loc 1 204 0
  71 0032 CDE91243 		strd	r4, r3, [sp, #72]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
  72              		.loc 1 206 0
  73 0036 4FF4A873 		mov	r3, #336
  74              	.LBB21:
 196:Src/main.c    **** 
  75              		.loc 1 196 0
  76 003a 029A     		ldr	r2, [sp, #8]
  77              	.LBE21:
 200:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccfK243l.s 			page 6


  78              		.loc 1 200 0
  79 003c 0C94     		str	r4, [sp, #48]
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  80              		.loc 1 202 0
  81 003e 1022     		movs	r2, #16
  82 0040 0125     		movs	r5, #1
 207:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  83              		.loc 1 207 0
  84 0042 CDE91534 		strd	r3, r4, [sp, #84]
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 209:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
  85              		.loc 1 209 0
  86 0046 0CA8     		add	r0, sp, #48
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
  87              		.loc 1 208 0
  88 0048 0723     		movs	r3, #7
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  89              		.loc 1 202 0
  90 004a CDE90F52 		strd	r5, r2, [sp, #60]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
  91              		.loc 1 205 0
  92 004e 1492     		str	r2, [sp, #80]
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
  93              		.loc 1 208 0
  94 0050 1793     		str	r3, [sp, #92]
  95              		.loc 1 209 0
  96 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
  97              	.LVL0:
  98 0056 00B1     		cbz	r0, .L2
  99              	.L3:
 100 0058 FEE7     		b	.L3
 101              	.L2:
 210:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 211:Src/main.c    ****   }
 212:Src/main.c    **** 
 213:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 214:Src/main.c    ****   */
 215:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 102              		.loc 1 215 0
 103 005a 0F23     		movs	r3, #15
 216:Src/main.c    ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 217:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 104              		.loc 1 217 0
 105 005c CDE90734 		strd	r3, r4, [sp, #28]
 218:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 106              		.loc 1 218 0
 107 0060 0990     		str	r0, [sp, #36]
 219:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 220:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 108              		.loc 1 220 0
 109 0062 4FF4A052 		mov	r2, #5120
 110 0066 4FF48053 		mov	r3, #4096
 221:Src/main.c    **** 
 222:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 111              		.loc 1 222 0
 112 006a 0521     		movs	r1, #5
 113 006c 07A8     		add	r0, sp, #28
ARM GAS  /tmp/ccfK243l.s 			page 7


 220:Src/main.c    **** 
 114              		.loc 1 220 0
 115 006e CDE90A23 		strd	r2, r3, [sp, #40]
 116              		.loc 1 222 0
 117 0072 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 118              	.LVL1:
 119 0076 00B1     		cbz	r0, .L4
 120              	.L5:
 121 0078 FEE7     		b	.L5
 122              	.L4:
 223:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 224:Src/main.c    ****   }
 225:Src/main.c    **** 
 226:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 227:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 123              		.loc 1 227 0
 124 007a C023     		movs	r3, #192
 228:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 229:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 125              		.loc 1 229 0
 126 007c 03A8     		add	r0, sp, #12
 228:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 127              		.loc 1 228 0
 128 007e CDE90434 		strd	r3, r4, [sp, #16]
 226:Src/main.c    ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 129              		.loc 1 226 0
 130 0082 0395     		str	r5, [sp, #12]
 131              		.loc 1 229 0
 132 0084 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 133              	.LVL2:
 134 0088 0446     		mov	r4, r0
 135 008a 00B1     		cbz	r0, .L6
 136              	.L7:
 137 008c FEE7     		b	.L7
 138              	.L6:
 230:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 231:Src/main.c    ****   }
 232:Src/main.c    **** 
 233:Src/main.c    ****   /**Configure the Systick interrupt time
 234:Src/main.c    ****   */
 235:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 139              		.loc 1 235 0
 140 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 141              	.LVL3:
 142 0092 4FF47A73 		mov	r3, #1000
 143 0096 B0FBF3F0 		udiv	r0, r0, r3
 144 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
 145              	.LVL4:
 236:Src/main.c    **** 
 237:Src/main.c    ****   /**Configure the Systick
 238:Src/main.c    ****   */
 239:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 146              		.loc 1 239 0
 147 009e 0420     		movs	r0, #4
 148 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 149              	.LVL5:
 240:Src/main.c    **** 
ARM GAS  /tmp/ccfK243l.s 			page 8


 241:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 150              		.loc 1 242 0
 151 00a4 2246     		mov	r2, r4
 152 00a6 2146     		mov	r1, r4
 153 00a8 4FF0FF30 		mov	r0, #-1
 154 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 155              	.LVL6:
 243:Src/main.c    **** }
 156              		.loc 1 243 0
 157 00b0 19B0     		add	sp, sp, #100
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 12
 160              		@ sp needed
 161 00b2 30BD     		pop	{r4, r5, pc}
 162              	.L9:
 163              		.align	2
 164              	.L8:
 165 00b4 00380240 		.word	1073887232
 166 00b8 00700040 		.word	1073770496
 167              		.cfi_endproc
 168              	.LFE160:
 170              		.section	.text.startup.main,"ax",%progbits
 171              		.align	1
 172              		.global	main
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	main:
 179              	.LFB159:
 108:Src/main.c    ****   /* USER CODE BEGIN 1 */
 180              		.loc 1 108 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 48
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 185              	.LCFI3:
 186              		.cfi_def_cfa_offset 36
 187              		.cfi_offset 4, -36
 188              		.cfi_offset 5, -32
 189              		.cfi_offset 6, -28
 190              		.cfi_offset 7, -24
 191              		.cfi_offset 8, -20
 192              		.cfi_offset 9, -16
 193              		.cfi_offset 10, -12
 194              		.cfi_offset 11, -8
 195              		.cfi_offset 14, -4
 196 0004 8DB0     		sub	sp, sp, #52
 197              	.LCFI4:
 198              		.cfi_def_cfa_offset 88
 199              	.LBB40:
 200              	.LBB41:
 201              	.LBB42:
 244:Src/main.c    **** 
 245:Src/main.c    **** /* CRC init function */
 246:Src/main.c    **** static void MX_CRC_Init(void) {
ARM GAS  /tmp/ccfK243l.s 			page 9


 247:Src/main.c    ****   hcrc.Instance = CRC;
 248:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 249:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 250:Src/main.c    ****   }
 251:Src/main.c    **** 
 252:Src/main.c    ****   __HAL_CRC_DR_RESET(&hcrc);
 253:Src/main.c    **** }
 254:Src/main.c    **** 
 255:Src/main.c    **** /* I2S2 init function */
 256:Src/main.c    **** static void MX_I2S2_Init(void) {
 257:Src/main.c    ****   hi2s2.Instance = SPI2;
 258:Src/main.c    ****   hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 259:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
 260:Src/main.c    ****   hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 261:Src/main.c    ****   hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 262:Src/main.c    ****   hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 263:Src/main.c    ****   hi2s2.Init.CPOL = I2S_CPOL_LOW;
 264:Src/main.c    ****   hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 265:Src/main.c    ****   hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 266:Src/main.c    ****   if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 267:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 268:Src/main.c    ****   }
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /* SPI1 init function */
 272:Src/main.c    **** static void MX_SPI1_Init(void) {
 273:Src/main.c    ****   /* SPI1 parameter configuration*/
 274:Src/main.c    ****   hspi1.Instance = SPI1;
 275:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 276:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 277:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 278:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 279:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 280:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 281:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 282:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 283:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 284:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 285:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 286:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 287:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 288:Src/main.c    ****   }
 289:Src/main.c    **** }
 290:Src/main.c    **** 
 291:Src/main.c    **** /* USART2 init function */
 292:Src/main.c    **** static void MX_USART2_UART_Init(void) {
 293:Src/main.c    ****   huart2.Instance = USART2;
 294:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 295:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 296:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 297:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 298:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 299:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 300:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 301:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK) {
 302:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 303:Src/main.c    ****   }
ARM GAS  /tmp/ccfK243l.s 			page 10


 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /** Configure pins as
 307:Src/main.c    ****         * Analog
 308:Src/main.c    ****         * Input
 309:Src/main.c    ****         * Output
 310:Src/main.c    ****         * EVENT_OUT
 311:Src/main.c    ****         * EXTI
 312:Src/main.c    ****      PA4   ------> I2S3_WS
 313:Src/main.c    **** */
 314:Src/main.c    **** static void MX_GPIO_Init(void) {
 315:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* GPIO Ports Clock Enable */
 318:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 202              		.loc 1 318 0
 203 0006 0024     		movs	r4, #0
 204              	.LBE42:
 205              	.LBE41:
 206              	.LBE40:
 118:Src/main.c    **** 
 207              		.loc 1 118 0
 208 0008 FFF7FEFF 		bl	HAL_Init
 209              	.LVL7:
 124:Src/main.c    **** 
 210              		.loc 1 124 0
 211 000c FFF7FEFF 		bl	SystemClock_Config
 212              	.LVL8:
 213              	.LBB52:
 214              	.LBB51:
 215              	.LBB43:
 216              		.loc 1 318 0
 217 0010 9F4B     		ldr	r3, .L24
 218 0012 0194     		str	r4, [sp, #4]
 219 0014 1A6B     		ldr	r2, [r3, #48]
 220              	.LBE43:
 319:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 320:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 321:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 322:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 323:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 324:Src/main.c    **** 
 325:Src/main.c    ****   /*Configure GPIO pin Output Level */
 326:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 221              		.loc 1 326 0
 222 0016 9F48     		ldr	r0, .L24+4
 223              	.LBB44:
 318:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 224              		.loc 1 318 0
 225 0018 42F01002 		orr	r2, r2, #16
 226 001c 1A63     		str	r2, [r3, #48]
 227 001e 1A6B     		ldr	r2, [r3, #48]
 228 0020 02F01002 		and	r2, r2, #16
 229 0024 0192     		str	r2, [sp, #4]
 230 0026 019A     		ldr	r2, [sp, #4]
 231              	.LBE44:
 232              	.LBB45:
ARM GAS  /tmp/ccfK243l.s 			page 11


 319:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 233              		.loc 1 319 0
 234 0028 0294     		str	r4, [sp, #8]
 235 002a 1A6B     		ldr	r2, [r3, #48]
 236 002c 42F00402 		orr	r2, r2, #4
 237 0030 1A63     		str	r2, [r3, #48]
 238 0032 1A6B     		ldr	r2, [r3, #48]
 239 0034 02F00402 		and	r2, r2, #4
 240 0038 0292     		str	r2, [sp, #8]
 241 003a 029A     		ldr	r2, [sp, #8]
 242              	.LBE45:
 243              	.LBB46:
 320:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 244              		.loc 1 320 0
 245 003c 0394     		str	r4, [sp, #12]
 246 003e 1A6B     		ldr	r2, [r3, #48]
 247 0040 42F08002 		orr	r2, r2, #128
 248 0044 1A63     		str	r2, [r3, #48]
 249 0046 1A6B     		ldr	r2, [r3, #48]
 250 0048 02F08002 		and	r2, r2, #128
 251 004c 0392     		str	r2, [sp, #12]
 252 004e 039A     		ldr	r2, [sp, #12]
 253              	.LBE46:
 254              	.LBB47:
 321:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 255              		.loc 1 321 0
 256 0050 0494     		str	r4, [sp, #16]
 257 0052 1A6B     		ldr	r2, [r3, #48]
 258 0054 42F00102 		orr	r2, r2, #1
 259 0058 1A63     		str	r2, [r3, #48]
 260 005a 1A6B     		ldr	r2, [r3, #48]
 261 005c 02F00102 		and	r2, r2, #1
 262 0060 0492     		str	r2, [sp, #16]
 263 0062 049A     		ldr	r2, [sp, #16]
 264              	.LBE47:
 265              	.LBB48:
 322:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 266              		.loc 1 322 0
 267 0064 0594     		str	r4, [sp, #20]
 268 0066 1A6B     		ldr	r2, [r3, #48]
 269 0068 42F00202 		orr	r2, r2, #2
 270 006c 1A63     		str	r2, [r3, #48]
 271 006e 1A6B     		ldr	r2, [r3, #48]
 272 0070 02F00202 		and	r2, r2, #2
 273 0074 0592     		str	r2, [sp, #20]
 274 0076 059A     		ldr	r2, [sp, #20]
 275              	.LBE48:
 276              	.LBB49:
 323:Src/main.c    **** 
 277              		.loc 1 323 0
 278 0078 0694     		str	r4, [sp, #24]
 279 007a 1A6B     		ldr	r2, [r3, #48]
 280 007c 42F00802 		orr	r2, r2, #8
 281 0080 1A63     		str	r2, [r3, #48]
 282 0082 1B6B     		ldr	r3, [r3, #48]
 283 0084 03F00803 		and	r3, r3, #8
 284 0088 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/ccfK243l.s 			page 12


 285              	.LBE49:
 286              		.loc 1 326 0
 287 008a 2246     		mov	r2, r4
 288 008c 0C21     		movs	r1, #12
 289              	.LBB50:
 323:Src/main.c    **** 
 290              		.loc 1 323 0
 291 008e 069B     		ldr	r3, [sp, #24]
 292              	.LBE50:
 293              		.loc 1 326 0
 294 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 295              	.LVL9:
 327:Src/main.c    **** 
 328:Src/main.c    ****   /*Configure GPIO pin Output Level */
 329:Src/main.c    ****   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 296              		.loc 1 329 0
 297 0094 0122     		movs	r2, #1
 298 0096 1146     		mov	r1, r2
 299 0098 7F48     		ldr	r0, .L24+8
 300 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 301              	.LVL10:
 330:Src/main.c    ****                     GPIO_PIN_SET);
 331:Src/main.c    **** 
 332:Src/main.c    ****   /*Configure GPIO pin Output Level */
 333:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 302              		.loc 1 333 0
 303 009e 2246     		mov	r2, r4
 304 00a0 4FF47041 		mov	r1, #61440
 305 00a4 7D48     		ldr	r0, .L24+12
 306 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 307              	.LVL11:
 334:Src/main.c    ****                     GPIO_PIN_RESET);
 335:Src/main.c    **** 
 336:Src/main.c    ****   /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin */
 337:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_2 | CS_I2C_SPI_Pin;
 338:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 308              		.loc 1 338 0
 309 00aa 0125     		movs	r5, #1
 339:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 340:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 341:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 310              		.loc 1 341 0
 311 00ac 07A9     		add	r1, sp, #28
 312 00ae 7948     		ldr	r0, .L24+4
 338:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 313              		.loc 1 338 0
 314 00b0 0C27     		movs	r7, #12
 315 00b2 CDE90775 		strd	r7, r5, [sp, #28]
 340:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 316              		.loc 1 340 0
 317 00b6 CDE90944 		strd	r4, r4, [sp, #36]
 318              		.loc 1 341 0
 319 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 320              	.LVL12:
 342:Src/main.c    **** 
 343:Src/main.c    ****   /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
 344:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
ARM GAS  /tmp/ccfK243l.s 			page 13


 345:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 346:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 347:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 348:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 321              		.loc 1 348 0
 322 00be 07A9     		add	r1, sp, #28
 323 00c0 7548     		ldr	r0, .L24+8
 349:Src/main.c    **** 
 350:Src/main.c    ****   /*Configure GPIO pin : I2S3_WS_Pin */
 351:Src/main.c    ****   GPIO_InitStruct.Pin = I2S3_WS_Pin;
 352:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 324              		.loc 1 352 0
 325 00c2 4FF00208 		mov	r8, #2
 345:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 326              		.loc 1 345 0
 327 00c6 CDE90755 		strd	r5, r5, [sp, #28]
 347:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 328              		.loc 1 347 0
 329 00ca CDE90944 		strd	r4, r4, [sp, #36]
 348:Src/main.c    **** 
 330              		.loc 1 348 0
 331 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 332              	.LVL13:
 333              		.loc 1 352 0
 334 00d2 1023     		movs	r3, #16
 335 00d4 CDE90738 		strd	r3, r8, [sp, #28]
 353:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 354:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 355:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 356:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 336              		.loc 1 356 0
 337 00d8 07A9     		add	r1, sp, #28
 355:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 338              		.loc 1 355 0
 339 00da 0623     		movs	r3, #6
 340              		.loc 1 356 0
 341 00dc 7048     		ldr	r0, .L24+16
 355:Src/main.c    ****   HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 342              		.loc 1 355 0
 343 00de 0B93     		str	r3, [sp, #44]
 354:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 344              		.loc 1 354 0
 345 00e0 CDE90944 		strd	r4, r4, [sp, #36]
 357:Src/main.c    **** 
 358:Src/main.c    ****   /*Configure GPIO pin : BOOT1_Pin */
 359:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 346              		.loc 1 359 0
 347 00e4 0426     		movs	r6, #4
 356:Src/main.c    **** 
 348              		.loc 1 356 0
 349 00e6 FFF7FEFF 		bl	HAL_GPIO_Init
 350              	.LVL14:
 360:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 361:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 362:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 351              		.loc 1 362 0
 352 00ea 07A9     		add	r1, sp, #28
ARM GAS  /tmp/ccfK243l.s 			page 14


 353 00ec 6D48     		ldr	r0, .L24+20
 361:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 354              		.loc 1 361 0
 355 00ee 0994     		str	r4, [sp, #36]
 360:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 356              		.loc 1 360 0
 357 00f0 CDE90764 		strd	r6, r4, [sp, #28]
 358              		.loc 1 362 0
 359 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 360              	.LVL15:
 363:Src/main.c    **** 
 364:Src/main.c    ****   /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
 365:Src/main.c    ****   GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 361              		.loc 1 365 0
 362 00f8 4FF47043 		mov	r3, #61440
 366:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 367:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 368:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 369:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 363              		.loc 1 369 0
 364 00fc 07A9     		add	r1, sp, #28
 365 00fe 6748     		ldr	r0, .L24+12
 366:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 366              		.loc 1 366 0
 367 0100 CDE90735 		strd	r3, r5, [sp, #28]
 368:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 368              		.loc 1 368 0
 369 0104 CDE90944 		strd	r4, r4, [sp, #36]
 370              		.loc 1 369 0
 371 0108 FFF7FEFF 		bl	HAL_GPIO_Init
 372              	.LVL16:
 370:Src/main.c    **** 
 371:Src/main.c    ****   /*Configure GPIO pin : MEMS_INT2_Pin */
 372:Src/main.c    ****   GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 373:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 373              		.loc 1 373 0
 374 010c 664B     		ldr	r3, .L24+24
 374:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 375:Src/main.c    ****   HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 375              		.loc 1 375 0
 376 010e 6148     		ldr	r0, .L24+4
 372:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 377              		.loc 1 372 0
 378 0110 CDF81C80 		str	r8, [sp, #28]
 379              		.loc 1 375 0
 380 0114 07A9     		add	r1, sp, #28
 374:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 381              		.loc 1 374 0
 382 0116 CDE90834 		strd	r3, r4, [sp, #32]
 383              		.loc 1 375 0
 384 011a FFF7FEFF 		bl	HAL_GPIO_Init
 385              	.LVL17:
 386              	.LBE51:
 387              	.LBE52:
 388              	.LBB53:
 389              	.LBB54:
 274:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
ARM GAS  /tmp/ccfK243l.s 			page 15


 390              		.loc 1 274 0
 391 011e 6348     		ldr	r0, .L24+28
 275:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 392              		.loc 1 275 0
 393 0120 DFF8C4C1 		ldr	ip, .L24+88
 284:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 394              		.loc 1 284 0
 395 0124 8462     		str	r4, [r0, #40]
 275:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 396              		.loc 1 275 0
 397 0126 4FF48273 		mov	r3, #260
 398 012a C0E900C3 		strd	ip, r3, [r0]
 280:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 399              		.loc 1 280 0
 400 012e 4FF40073 		mov	r3, #512
 281:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 401              		.loc 1 281 0
 402 0132 C0E90634 		strd	r3, r4, [r0, #24]
 285:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 403              		.loc 1 285 0
 404 0136 0A23     		movs	r3, #10
 277:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 405              		.loc 1 277 0
 406 0138 C0E90244 		strd	r4, r4, [r0, #8]
 279:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 407              		.loc 1 279 0
 408 013c C0E90444 		strd	r4, r4, [r0, #16]
 283:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 409              		.loc 1 283 0
 410 0140 C0E90844 		strd	r4, r4, [r0, #32]
 285:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 411              		.loc 1 285 0
 412 0144 C362     		str	r3, [r0, #44]
 286:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 413              		.loc 1 286 0
 414 0146 FFF7FEFF 		bl	HAL_SPI_Init
 415              	.LVL18:
 416 014a 00B1     		cbz	r0, .L11
 417              	.L12:
 418 014c FEE7     		b	.L12
 419              	.L11:
 420              	.LBE54:
 421              	.LBE53:
 422              	.LBB55:
 423              	.LBB56:
 293:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 424              		.loc 1 293 0
 425 014e 584B     		ldr	r3, .L24+32
 294:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 426              		.loc 1 294 0
 427 0150 5849     		ldr	r1, .L24+36
 428 0152 4FF4E132 		mov	r2, #115200
 296:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 429              		.loc 1 296 0
 430 0156 C3E90200 		strd	r0, r0, [r3, #8]
 298:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 431              		.loc 1 298 0
ARM GAS  /tmp/ccfK243l.s 			page 16


 432 015a C3E90407 		strd	r0, r7, [r3, #16]
 300:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK) {
 433              		.loc 1 300 0
 434 015e C3E90600 		strd	r0, r0, [r3, #24]
 301:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 435              		.loc 1 301 0
 436 0162 1846     		mov	r0, r3
 294:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 437              		.loc 1 294 0
 438 0164 C3E90012 		strd	r1, r2, [r3]
 301:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 439              		.loc 1 301 0
 440 0168 FFF7FEFF 		bl	HAL_UART_Init
 441              	.LVL19:
 442 016c 00B1     		cbz	r0, .L13
 443              	.L14:
 444 016e FEE7     		b	.L14
 445              	.L13:
 446              	.LBE56:
 447              	.LBE55:
 448              	.LBB57:
 449              	.LBB58:
 257:Src/main.c    ****   hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 450              		.loc 1 257 0
 451 0170 514C     		ldr	r4, .L24+40
 258:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
 452              		.loc 1 258 0
 453 0172 524A     		ldr	r2, .L24+44
 261:Src/main.c    ****   hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 454              		.loc 1 261 0
 455 0174 2061     		str	r0, [r4, #16]
 258:Src/main.c    ****   hi2s2.Init.Standard = I2S_STANDARD_LSB;
 456              		.loc 1 258 0
 457 0176 4FF44073 		mov	r3, #768
 458 017a C4E90023 		strd	r2, r3, [r4]
 259:Src/main.c    ****   hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 459              		.loc 1 259 0
 460 017e 2023     		movs	r3, #32
 260:Src/main.c    ****   hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 461              		.loc 1 260 0
 462 0180 C4E90230 		strd	r3, r0, [r4, #8]
 262:Src/main.c    ****   hi2s2.Init.CPOL = I2S_CPOL_LOW;
 463              		.loc 1 262 0
 464 0184 4FF4FA43 		mov	r3, #32000
 263:Src/main.c    ****   hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 465              		.loc 1 263 0
 466 0188 C4E90530 		strd	r3, r0, [r4, #20]
 265:Src/main.c    ****   if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 467              		.loc 1 265 0
 468 018c C4E90700 		strd	r0, r0, [r4, #28]
 266:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 469              		.loc 1 266 0
 470 0190 2046     		mov	r0, r4
 471 0192 FFF7FEFF 		bl	HAL_I2S_Init
 472              	.LVL20:
 473 0196 00B1     		cbz	r0, .L15
 474              	.L16:
ARM GAS  /tmp/ccfK243l.s 			page 17


 475 0198 FEE7     		b	.L16
 476              	.L15:
 477              	.LBE58:
 478              	.LBE57:
 479              	.LBB59:
 480              	.LBB60:
 247:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 481              		.loc 1 247 0
 482 019a 494F     		ldr	r7, .L24+48
 483 019c 494B     		ldr	r3, .L24+52
 484 019e 3B60     		str	r3, [r7]
 248:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 485              		.loc 1 248 0
 486 01a0 3846     		mov	r0, r7
 487 01a2 FFF7FEFF 		bl	HAL_CRC_Init
 488              	.LVL21:
 489 01a6 00B1     		cbz	r0, .L17
 490              	.L18:
 491 01a8 FEE7     		b	.L18
 492              	.L17:
 252:Src/main.c    **** }
 493              		.loc 1 252 0
 494 01aa 3A68     		ldr	r2, [r7]
 495              	.LBE60:
 496              	.LBE59:
 143:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 497              		.loc 1 143 0
 498 01ac DFF83C81 		ldr	r8, .L24+92
 499              	.LBB63:
 500              	.LBB61:
 252:Src/main.c    **** }
 501              		.loc 1 252 0
 502 01b0 9368     		ldr	r3, [r2, #8]
 503              	.LBE61:
 504              	.LBE63:
 505              	.LBB64:
 162:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 506              		.loc 1 162 0
 507 01b2 DFF828A1 		ldr	r10, .L24+76
 508 01b6 DFF810B1 		ldr	fp, .L24+56
 509              	.LBE64:
 510              	.LBB66:
 511              	.LBB62:
 252:Src/main.c    **** }
 512              		.loc 1 252 0
 513 01ba 43F00103 		orr	r3, r3, #1
 514 01be 9360     		str	r3, [r2, #8]
 515              	.LBE62:
 516              	.LBE66:
 136:Src/main.c    ****   /* USER CODE BEGIN 2 */
 517              		.loc 1 136 0
 518 01c0 FFF7FEFF 		bl	MX_PDM2PCM_Init
 519              	.LVL22:
 138:Src/main.c    **** 
 520              		.loc 1 138 0
 521 01c4 4FF48051 		mov	r1, #4096
 522 01c8 3F48     		ldr	r0, .L24+56
ARM GAS  /tmp/ccfK243l.s 			page 18


 523 01ca FFF7FEFF 		bl	arm_rfft_fast_init_f32
 524              	.LVL23:
 140:Src/main.c    ****   // SPI2_NVIC_INIT();
 525              		.loc 1 140 0
 526 01ce 2A46     		mov	r2, r5
 527 01d0 3146     		mov	r1, r6
 528 01d2 3048     		ldr	r0, .L24+4
 147:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 529              		.loc 1 147 0
 530 01d4 3D4E     		ldr	r6, .L24+60
 140:Src/main.c    ****   // SPI2_NVIC_INIT();
 531              		.loc 1 140 0
 532 01d6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 533              	.LVL24:
 142:Src/main.c    ****   RECORD_ENABLE = 1;  // Enable I2S reading
 534              		.loc 1 142 0
 535 01da 2A46     		mov	r2, r5
 536 01dc 4FF48071 		mov	r1, #256
 537 01e0 2C48     		ldr	r0, .L24+4
 538 01e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 539              	.LVL25:
 144:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
 540              		.loc 1 144 0
 541 01e6 2A46     		mov	r2, r5
 542 01e8 4FF40051 		mov	r1, #8192
 543 01ec 2B48     		ldr	r0, .L24+12
 143:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 544              		.loc 1 143 0
 545 01ee 88F80050 		strb	r5, [r8]
 144:Src/main.c    ****   uint8_t PCM_switch_prev = PCM_switch_flag;
 546              		.loc 1 144 0
 547 01f2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 548              	.LVL26:
 145:Src/main.c    ****   // uint8_t PDM_switch_prev = PDM_complete_flag;
 549              		.loc 1 145 0
 550 01f6 364D     		ldr	r5, .L24+64
 147:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 551              		.loc 1 147 0
 552 01f8 364B     		ldr	r3, .L24+68
 148:Src/main.c    ****   /* USER CODE END 2 */
 553              		.loc 1 148 0
 554 01fa 3749     		ldr	r1, .L24+72
 145:Src/main.c    ****   // uint8_t PDM_switch_prev = PDM_complete_flag;
 555              		.loc 1 145 0
 556 01fc 2F78     		ldrb	r7, [r5]	@ zero_extendqisi2
 557              	.LVL27:
 147:Src/main.c    ****   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, 64);
 558              		.loc 1 147 0
 559 01fe 1E60     		str	r6, [r3]
 148:Src/main.c    ****   /* USER CODE END 2 */
 560              		.loc 1 148 0
 561 0200 2046     		mov	r0, r4
 562 0202 4022     		movs	r2, #64
 563 0204 FFF7FEFF 		bl	HAL_I2S_Receive_IT
 564              	.LVL28:
 565 0208 4446     		mov	r4, r8
 566              	.LBB67:
ARM GAS  /tmp/ccfK243l.s 			page 19


 162:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 567              		.loc 1 162 0
 568 020a DFF8E480 		ldr	r8, .L24+96
 569              	.L19:
 570              	.LBE67:
 155:Src/main.c    ****       PCM_switch_prev = PCM_switch_flag;
 571              		.loc 1 155 0
 572 020e 95F80090 		ldrb	r9, [r5]	@ zero_extendqisi2
 573 0212 B945     		cmp	r9, r7
 574 0214 2FD0     		beq	.L20
 575 0216 314A     		ldr	r2, .L24+76
 576 0218 0023     		movs	r3, #0
 577              	.L21:
 578              	.LVL29:
 579              	.LBB68:
 580              	.LBB65:
 159:Src/main.c    ****       }
 581              		.loc 1 159 0 discriminator 3
 582 021a 36F81310 		ldrh	r1, [r6, r3, lsl #1]
 583 021e 07EE901A 		vmov	s15, r1	@ int
 584 0222 0133     		adds	r3, r3, #1
 585              	.LVL30:
 586 0224 F8EE677A 		vcvt.f32.u32	s15, s15
 158:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 587              		.loc 1 158 0 discriminator 3
 588 0228 B3F5006F 		cmp	r3, #2048
 159:Src/main.c    ****       }
 589              		.loc 1 159 0 discriminator 3
 590 022c E2EC017A 		vstmia.32	r2!, {s15}
 158:Src/main.c    ****         fft_input_buffer[i] = (float32_t)PCM_BUF_1[i];
 591              		.loc 1 158 0 discriminator 3
 592 0230 F3D1     		bne	.L21
 593              	.LBE65:
 162:Src/main.c    ****       arm_cmplx_mag_f32(fft_output_buffer, fft_mag_buffer, PCM_BUF_SIZE * 2);
 594              		.loc 1 162 0
 595 0232 0023     		movs	r3, #0
 596 0234 4246     		mov	r2, r8
 597 0236 5146     		mov	r1, r10
 598 0238 5846     		mov	r0, fp
 599 023a FFF7FEFF 		bl	arm_rfft_fast_f32
 600              	.LVL31:
 163:Src/main.c    ****       volatile float32_t maxmag;
 601              		.loc 1 163 0
 602 023e 4FF48052 		mov	r2, #4096
 603 0242 2749     		ldr	r1, .L24+80
 604 0244 4046     		mov	r0, r8
 605 0246 FFF7FEFF 		bl	arm_cmplx_mag_f32
 606              	.LVL32:
 166:Src/main.c    ****       HAL_UART_Transmit(&huart2, PCM_BUF_1, PCM_BUF_SIZE * 2, 5000);
 607              		.loc 1 166 0
 608 024a 07AB     		add	r3, sp, #28
 609 024c 6A46     		mov	r2, sp
 610 024e 4FF48051 		mov	r1, #4096
 611 0252 2448     		ldr	r0, .L24+84
 612 0254 FFF7FEFF 		bl	arm_max_f32
 613              	.LVL33:
 167:Src/main.c    ****       HAL_UART_Transmit(&huart2, &index, 4, 100);
ARM GAS  /tmp/ccfK243l.s 			page 20


 614              		.loc 1 167 0
 615 0258 41F28833 		movw	r3, #5000
 616 025c 4FF48052 		mov	r2, #4096
 617 0260 1A49     		ldr	r1, .L24+60
 618 0262 1348     		ldr	r0, .L24+32
 619 0264 FFF7FEFF 		bl	HAL_UART_Transmit
 620              	.LVL34:
 168:Src/main.c    ****     }
 621              		.loc 1 168 0
 622 0268 6423     		movs	r3, #100
 623 026a 0422     		movs	r2, #4
 624 026c 07A9     		add	r1, sp, #28
 625 026e 1048     		ldr	r0, .L24+32
 626 0270 FFF7FEFF 		bl	HAL_UART_Transmit
 627              	.LVL35:
 628 0274 4F46     		mov	r7, r9
 629              	.LVL36:
 630              	.L20:
 631              	.LBE68:
 171:Src/main.c    ****       HAL_Delay(150);
 632              		.loc 1 171 0
 633 0276 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 634 0278 002B     		cmp	r3, #0
 635 027a C8D1     		bne	.L19
 172:Src/main.c    ****       HAL_GPIO_TogglePin(LED_PORT, LED4_PIN);
 636              		.loc 1 172 0
 637 027c 9620     		movs	r0, #150
 638 027e FFF7FEFF 		bl	HAL_Delay
 639              	.LVL37:
 173:Src/main.c    ****     }
 640              		.loc 1 173 0
 641 0282 4FF40041 		mov	r1, #32768
 642 0286 0548     		ldr	r0, .L24+12
 643 0288 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 644              	.LVL38:
 645 028c BFE7     		b	.L19
 646              	.L25:
 647 028e 00BF     		.align	2
 648              	.L24:
 649 0290 00380240 		.word	1073887232
 650 0294 00100240 		.word	1073876992
 651 0298 00080240 		.word	1073874944
 652 029c 000C0240 		.word	1073875968
 653 02a0 00000240 		.word	1073872896
 654 02a4 00040240 		.word	1073873920
 655 02a8 00001210 		.word	269615104
 656 02ac 00000000 		.word	hspi1
 657 02b0 00000000 		.word	huart2
 658 02b4 00440040 		.word	1073759232
 659 02b8 00000000 		.word	hi2s2
 660 02bc 00380040 		.word	1073756160
 661 02c0 00000000 		.word	hcrc
 662 02c4 00300240 		.word	1073885184
 663 02c8 00000000 		.word	S
 664 02cc 00000000 		.word	PCM_BUF_1
 665 02d0 00000000 		.word	.LANCHOR1
 666 02d4 00000000 		.word	current_PCM_buffer
ARM GAS  /tmp/ccfK243l.s 			page 21


 667 02d8 00000000 		.word	PDM_BUF_1
 668 02dc 00000000 		.word	fft_input_buffer
 669 02e0 00000000 		.word	fft_mag_buffer
 670 02e4 04000000 		.word	fft_mag_buffer+4
 671 02e8 00300140 		.word	1073819648
 672 02ec 00000000 		.word	.LANCHOR0
 673 02f0 00000000 		.word	fft_output_buffer
 674              		.cfi_endproc
 675              	.LFE159:
 677              		.section	.text.HAL_I2S_RxCpltCallback,"ax",%progbits
 678              		.align	1
 679              		.global	HAL_I2S_RxCpltCallback
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 683              		.fpu fpv4-sp-d16
 685              	HAL_I2S_RxCpltCallback:
 686              	.LFB167:
 376:Src/main.c    **** }
 377:Src/main.c    **** 
 378:Src/main.c    **** /* USER CODE BEGIN 4 */
 379:Src/main.c    **** 
 380:Src/main.c    **** inline uint16_t *getPCMPointer(uint8_t PCM_switch_flag) {
 381:Src/main.c    ****   if (PCM_switch_flag == 1) {
 382:Src/main.c    ****     return PCM_BUF_2;
 383:Src/main.c    ****   } else {
 384:Src/main.c    ****     return PCM_BUF_1;
 385:Src/main.c    ****   }
 386:Src/main.c    **** }
 387:Src/main.c    **** 
 388:Src/main.c    **** void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 687              		.loc 1 388 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              	.LVL39:
 692 0000 38B5     		push	{r3, r4, r5, lr}
 693              	.LCFI5:
 694              		.cfi_def_cfa_offset 16
 695              		.cfi_offset 3, -16
 696              		.cfi_offset 4, -12
 697              		.cfi_offset 5, -8
 698              		.cfi_offset 14, -4
 389:Src/main.c    ****   PDM_complete_flag = 1;  // Signal completion to start new receive
 699              		.loc 1 389 0
 700 0002 164B     		ldr	r3, .L32
 390:Src/main.c    ****   PDM_Filter(PDM_BUF_1, &current_PCM_buffer[local_pcm_pointer],
 701              		.loc 1 390 0
 702 0004 164C     		ldr	r4, .L32+4
 703 0006 174D     		ldr	r5, .L32+8
 704 0008 2168     		ldr	r1, [r4]
 705 000a 1748     		ldr	r0, .L32+12
 706              	.LVL40:
 389:Src/main.c    ****   PDM_complete_flag = 1;  // Signal completion to start new receive
 707              		.loc 1 389 0
 708 000c 0122     		movs	r2, #1
 709 000e 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccfK243l.s 			page 22


 710              		.loc 1 390 0
 711 0010 2B68     		ldr	r3, [r5]
 712 0012 164A     		ldr	r2, .L32+16
 713 0014 03EB4101 		add	r1, r3, r1, lsl #1
 714 0018 FFF7FEFF 		bl	PDM_Filter
 715              	.LVL41:
 391:Src/main.c    ****              &PDM1_filter_handler);
 392:Src/main.c    ****   local_pcm_pointer =
 393:Src/main.c    ****       local_pcm_pointer + 16;  // The filter returns 16 samples of 2 bytes
 716              		.loc 1 393 0
 717 001c 2368     		ldr	r3, [r4]
 718 001e 144A     		ldr	r2, .L32+20
 719 0020 1033     		adds	r3, r3, #16
 394:Src/main.c    ****   if (local_pcm_pointer == PCM_BUF_SIZE) {
 720              		.loc 1 394 0
 721 0022 B3F5006F 		cmp	r3, #2048
 722 0026 0AD0     		beq	.L27
 392:Src/main.c    ****       local_pcm_pointer + 16;  // The filter returns 16 samples of 2 bytes
 723              		.loc 1 392 0
 724 0028 2360     		str	r3, [r4]
 725              	.L28:
 395:Src/main.c    ****     local_pcm_pointer = 0;
 396:Src/main.c    ****     PCM_switch_flag ^= 1;
 397:Src/main.c    ****     RECORD_ENABLE = 0;
 398:Src/main.c    ****     if (PCM_switch_flag == 1) {
 399:Src/main.c    ****       current_PCM_buffer = PCM_BUF_2;
 400:Src/main.c    ****     } else {
 401:Src/main.c    ****       current_PCM_buffer = PCM_BUF_1;
 402:Src/main.c    ****     }
 403:Src/main.c    ****   }
 404:Src/main.c    ****   if (RECORD_ENABLE == 1) {
 726              		.loc 1 404 0
 727 002a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 728 002c 012B     		cmp	r3, #1
 729 002e 14D1     		bne	.L26
 405:Src/main.c    ****     HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, DECIMATION_FACTOR);
 730              		.loc 1 405 0
 731 0030 4022     		movs	r2, #64
 732 0032 0D49     		ldr	r1, .L32+12
 733 0034 0F48     		ldr	r0, .L32+24
 406:Src/main.c    ****   }
 407:Src/main.c    ****   // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 408:Src/main.c    ****   // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);
 409:Src/main.c    **** }
 734              		.loc 1 409 0
 735 0036 BDE83840 		pop	{r3, r4, r5, lr}
 736              	.LCFI6:
 737              		.cfi_remember_state
 738              		.cfi_restore 14
 739              		.cfi_restore 5
 740              		.cfi_restore 4
 741              		.cfi_restore 3
 742              		.cfi_def_cfa_offset 0
 405:Src/main.c    ****     HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, DECIMATION_FACTOR);
 743              		.loc 1 405 0
 744 003a FFF7FEBF 		b	HAL_I2S_Receive_IT
 745              	.LVL42:
ARM GAS  /tmp/ccfK243l.s 			page 23


 746              	.L27:
 747              	.LCFI7:
 748              		.cfi_restore_state
 396:Src/main.c    ****     RECORD_ENABLE = 0;
 749              		.loc 1 396 0
 750 003e 0E48     		ldr	r0, .L32+28
 751 0040 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 395:Src/main.c    ****     PCM_switch_flag ^= 1;
 752              		.loc 1 395 0
 753 0042 0021     		movs	r1, #0
 754 0044 2160     		str	r1, [r4]
 396:Src/main.c    ****     RECORD_ENABLE = 0;
 755              		.loc 1 396 0
 756 0046 83F00104 		eor	r4, r3, #1
 757 004a 0470     		strb	r4, [r0]
 397:Src/main.c    ****     if (PCM_switch_flag == 1) {
 758              		.loc 1 397 0
 759 004c 1170     		strb	r1, [r2]
 398:Src/main.c    ****       current_PCM_buffer = PCM_BUF_2;
 760              		.loc 1 398 0
 761 004e 13B9     		cbnz	r3, .L29
 399:Src/main.c    ****     } else {
 762              		.loc 1 399 0
 763 0050 0A4B     		ldr	r3, .L32+32
 764              	.L31:
 401:Src/main.c    ****     }
 765              		.loc 1 401 0
 766 0052 2B60     		str	r3, [r5]
 767 0054 E9E7     		b	.L28
 768              	.L29:
 769 0056 0A4B     		ldr	r3, .L32+36
 770 0058 FBE7     		b	.L31
 771              	.L26:
 772              		.loc 1 409 0
 773 005a 38BD     		pop	{r3, r4, r5, pc}
 774              	.L33:
 775              		.align	2
 776              	.L32:
 777 005c 00000000 		.word	.LANCHOR2
 778 0060 00000000 		.word	.LANCHOR3
 779 0064 00000000 		.word	current_PCM_buffer
 780 0068 00000000 		.word	PDM_BUF_1
 781 006c 00000000 		.word	PDM1_filter_handler
 782 0070 00000000 		.word	.LANCHOR0
 783 0074 00000000 		.word	hi2s2
 784 0078 00000000 		.word	.LANCHOR1
 785 007c 00000000 		.word	PCM_BUF_2
 786 0080 00000000 		.word	PCM_BUF_1
 787              		.cfi_endproc
 788              	.LFE167:
 790              		.section	.text._Error_Handler,"ax",%progbits
 791              		.align	1
 792              		.global	_Error_Handler
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccfK243l.s 			page 24


 798              	_Error_Handler:
 799              	.LFB168:
 410:Src/main.c    **** 
 411:Src/main.c    **** /* USER CODE END 4 */
 412:Src/main.c    **** 
 413:Src/main.c    **** /**
 414:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 415:Src/main.c    ****   * @param  file: The file name as string.
 416:Src/main.c    ****   * @param  line: The line in file as a number.
 417:Src/main.c    ****   * @retval None
 418:Src/main.c    ****   */
 419:Src/main.c    **** void _Error_Handler(char *file, int line) {
 800              		.loc 1 419 0
 801              		.cfi_startproc
 802              		@ Volatile: function does not return.
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		@ link register save eliminated.
 806              	.LVL43:
 807              	.L35:
 808 0000 FEE7     		b	.L35
 809              		.cfi_endproc
 810              	.LFE168:
 812              		.comm	S,24,4
 813              		.global	RECORD_ENABLE
 814              		.comm	current_PCM_buffer,4,4
 815              		.comm	current_PDM_buffer,4,4
 816              		.global	PCM_switch_flag
 817              		.global	PDM_complete_flag
 818              		.global	local_pcm_pointer
 819              		.comm	fft_mag_buffer,16384,4
 820              		.comm	fft_input_buffer,8192,4
 821              		.comm	fft_output_buffer,16384,4
 822              		.comm	PCM_BUF_2,4096,2
 823              		.comm	PCM_BUF_1,4096,2
 824              		.comm	PDM_BUF_2,128,2
 825              		.comm	PDM_BUF_1,128,2
 826              		.comm	huart2,64,4
 827              		.comm	hspi1,88,4
 828              		.comm	hi2s2,72,4
 829              		.comm	hcrc,8,4
 830              		.section	.bss.PCM_switch_flag,"aw",%nobits
 831              		.set	.LANCHOR1,. + 0
 834              	PCM_switch_flag:
 835 0000 00       		.space	1
 836              		.section	.bss.PDM_complete_flag,"aw",%nobits
 837              		.set	.LANCHOR2,. + 0
 840              	PDM_complete_flag:
 841 0000 00       		.space	1
 842              		.section	.bss.RECORD_ENABLE,"aw",%nobits
 843              		.set	.LANCHOR0,. + 0
 846              	RECORD_ENABLE:
 847 0000 00       		.space	1
 848              		.section	.bss.local_pcm_pointer,"aw",%nobits
 849              		.align	2
 850              		.set	.LANCHOR3,. + 0
 853              	local_pcm_pointer:
ARM GAS  /tmp/ccfK243l.s 			page 25


 854 0000 00000000 		.space	4
 855              		.text
 856              	.Letext0:
 857              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 858              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 859              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 860              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 861              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 862              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 863              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 864              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 865              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 866              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 867              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 868              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 869              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 870              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 871              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 872              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 873              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 874              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 875              		.file 20 "Middlewares/ST/STM32_Audio/Addons/PDM/Inc/pdm2pcm_glo.h"
 876              		.file 21 "Inc/pdm2pcm.h"
 877              		.file 22 "/usr/arm-none-eabi/include/math.h"
 878              		.file 23 "Drivers/CMSIS/Include/arm_math.h"
 879              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 880              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccfK243l.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccfK243l.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccfK243l.s:25     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccfK243l.s:165    .text.SystemClock_Config:00000000000000b4 $d
     /tmp/ccfK243l.s:171    .text.startup.main:0000000000000000 $t
     /tmp/ccfK243l.s:178    .text.startup.main:0000000000000000 main
     /tmp/ccfK243l.s:649    .text.startup.main:0000000000000290 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:0000000000000040 huart2
                            *COM*:0000000000000048 hi2s2
                            *COM*:0000000000000008 hcrc
                            *COM*:0000000000000018 S
                            *COM*:0000000000001000 PCM_BUF_1
                            *COM*:0000000000000004 current_PCM_buffer
                            *COM*:0000000000000080 PDM_BUF_1
                            *COM*:0000000000002000 fft_input_buffer
                            *COM*:0000000000004000 fft_mag_buffer
                            *COM*:0000000000004000 fft_output_buffer
     /tmp/ccfK243l.s:678    .text.HAL_I2S_RxCpltCallback:0000000000000000 $t
     /tmp/ccfK243l.s:685    .text.HAL_I2S_RxCpltCallback:0000000000000000 HAL_I2S_RxCpltCallback
     /tmp/ccfK243l.s:777    .text.HAL_I2S_RxCpltCallback:000000000000005c $d
                            *COM*:0000000000001000 PCM_BUF_2
     /tmp/ccfK243l.s:791    .text._Error_Handler:0000000000000000 $t
     /tmp/ccfK243l.s:798    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccfK243l.s:846    .bss.RECORD_ENABLE:0000000000000000 RECORD_ENABLE
                            *COM*:0000000000000004 current_PDM_buffer
     /tmp/ccfK243l.s:834    .bss.PCM_switch_flag:0000000000000000 PCM_switch_flag
     /tmp/ccfK243l.s:840    .bss.PDM_complete_flag:0000000000000000 PDM_complete_flag
     /tmp/ccfK243l.s:853    .bss.local_pcm_pointer:0000000000000000 local_pcm_pointer
                            *COM*:0000000000000080 PDM_BUF_2
     /tmp/ccfK243l.s:835    .bss.PCM_switch_flag:0000000000000000 $d
     /tmp/ccfK243l.s:841    .bss.PDM_complete_flag:0000000000000000 $d
     /tmp/ccfK243l.s:847    .bss.RECORD_ENABLE:0000000000000000 $d
     /tmp/ccfK243l.s:849    .bss.local_pcm_pointer:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_I2S_Init
HAL_CRC_Init
MX_PDM2PCM_Init
arm_rfft_fast_init_f32
HAL_I2S_Receive_IT
arm_rfft_fast_f32
arm_cmplx_mag_f32
arm_max_f32
ARM GAS  /tmp/ccfK243l.s 			page 27


HAL_UART_Transmit
HAL_Delay
HAL_GPIO_TogglePin
PDM_Filter
PDM1_filter_handler
