ARM GAS  /tmp/ccvTkAwQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB126:
  27              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /**
   2:Src/stm32f4xx_it.c ****   ******************************************************************************
   3:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   4:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f4xx_it.c ****   ******************************************************************************
   6:Src/stm32f4xx_it.c ****   *
   7:Src/stm32f4xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   8:Src/stm32f4xx_it.c ****   *
   9:Src/stm32f4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f4xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f4xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f4xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f4xx_it.c ****   *
  20:Src/stm32f4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f4xx_it.c ****   *
  31:Src/stm32f4xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccvTkAwQ.s 			page 2


  32:Src/stm32f4xx_it.c ****   */
  33:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f4xx_it.c **** #include "stm32f4xx_hal.h"
  35:Src/stm32f4xx_it.c **** #include "stm32f4xx.h"
  36:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  37:Src/stm32f4xx_it.c **** #include "main.h"
  38:Src/stm32f4xx_it.c **** #include "pdm2pcm.h"
  39:Src/stm32f4xx_it.c **** 
  40:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  41:Src/stm32f4xx_it.c **** uint32_t local_pdm_pointer;
  42:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  43:Src/stm32f4xx_it.c **** 
  44:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  45:Src/stm32f4xx_it.c **** extern I2S_HandleTypeDef hi2s2;
  46:Src/stm32f4xx_it.c **** extern uint8_t RECORD_ENABLE;
  47:Src/stm32f4xx_it.c **** extern uint16_t * PDM_BUF_1;
  48:Src/stm32f4xx_it.c **** extern uint32_t local_pdm_pointer;
  49:Src/stm32f4xx_it.c **** extern uint32_t local_pcm_pointer;
  50:Src/stm32f4xx_it.c **** extern uint16_t * current_PCM_buffer;
  51:Src/stm32f4xx_it.c **** extern uint16_t * PCM_BUF_1;
  52:Src/stm32f4xx_it.c **** extern uint16_t * PCM_BUF_2;
  53:Src/stm32f4xx_it.c **** extern PDM_Filter_Handler_t PDM1_filter_handler;
  54:Src/stm32f4xx_it.c **** extern uint8_t PCM_switch_flag;
  55:Src/stm32f4xx_it.c **** 
  56:Src/stm32f4xx_it.c **** /******************************************************************************/
  57:Src/stm32f4xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  58:Src/stm32f4xx_it.c **** /******************************************************************************/
  59:Src/stm32f4xx_it.c **** 
  60:Src/stm32f4xx_it.c **** /**
  61:Src/stm32f4xx_it.c **** * @brief This function handles Non maskable interrupt.
  62:Src/stm32f4xx_it.c **** */
  63:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  64:Src/stm32f4xx_it.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  65:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  66:Src/stm32f4xx_it.c **** 
  67:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  68:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  69:Src/stm32f4xx_it.c **** 
  70:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  71:Src/stm32f4xx_it.c **** }
  33              		.loc 1 71 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE126:
  38              		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	1
  40              		.global	HardFault_Handler
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	HardFault_Handler:
ARM GAS  /tmp/ccvTkAwQ.s 			page 3


  47              	.LFB127:
  72:Src/stm32f4xx_it.c **** 
  73:Src/stm32f4xx_it.c **** /**
  74:Src/stm32f4xx_it.c **** * @brief This function handles Hard fault interrupt.
  75:Src/stm32f4xx_it.c **** */
  76:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  77:Src/stm32f4xx_it.c **** {
  48              		.loc 1 77 0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53 0000 08B5     		push	{r3, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 3, -8
  57              		.cfi_offset 14, -4
  78:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:Src/stm32f4xx_it.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
  58              		.loc 1 79 0
  59 0002 074C     		ldr	r4, .L5
  60 0004 0122     		movs	r2, #1
  61 0006 4FF40051 		mov	r1, #8192
  62 000a 2046     		mov	r0, r4
  63 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  64              	.LVL0:
  80:Src/stm32f4xx_it.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
  65              		.loc 1 80 0
  66 0010 0122     		movs	r2, #1
  67 0012 4FF48041 		mov	r1, #16384
  68 0016 2046     		mov	r0, r4
  69 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL1:
  71              	.L3:
  72 001c FEE7     		b	.L3
  73              	.L6:
  74 001e 00BF     		.align	2
  75              	.L5:
  76 0020 000C0240 		.word	1073875968
  77              		.cfi_endproc
  78              	.LFE127:
  80              		.section	.text.MemManage_Handler,"ax",%progbits
  81              		.align	1
  82              		.global	MemManage_Handler
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv4-sp-d16
  88              	MemManage_Handler:
  89              	.LFB128:
  81:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  82:Src/stm32f4xx_it.c ****   while (1)
  83:Src/stm32f4xx_it.c ****   {
  84:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  85:Src/stm32f4xx_it.c ****     
  86:Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  87:Src/stm32f4xx_it.c ****   }
ARM GAS  /tmp/ccvTkAwQ.s 			page 4


  88:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  89:Src/stm32f4xx_it.c **** 
  90:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  91:Src/stm32f4xx_it.c **** }
  92:Src/stm32f4xx_it.c **** 
  93:Src/stm32f4xx_it.c **** /**
  94:Src/stm32f4xx_it.c **** * @brief This function handles Memory management fault.
  95:Src/stm32f4xx_it.c **** */
  96:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
  97:Src/stm32f4xx_it.c **** {
  90              		.loc 1 97 0
  91              		.cfi_startproc
  92              		@ Volatile: function does not return.
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.L8:
  97 0000 FEE7     		b	.L8
  98              		.cfi_endproc
  99              	.LFE128:
 101              		.section	.text.BusFault_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	BusFault_Handler
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu fpv4-sp-d16
 109              	BusFault_Handler:
 110              	.LFB129:
  98:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  99:Src/stm32f4xx_it.c **** 
 100:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 101:Src/stm32f4xx_it.c ****   while (1)
 102:Src/stm32f4xx_it.c ****   {
 103:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 104:Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 105:Src/stm32f4xx_it.c ****   }
 106:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 107:Src/stm32f4xx_it.c **** 
 108:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 109:Src/stm32f4xx_it.c **** }
 110:Src/stm32f4xx_it.c **** 
 111:Src/stm32f4xx_it.c **** /**
 112:Src/stm32f4xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 113:Src/stm32f4xx_it.c **** */
 114:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 115:Src/stm32f4xx_it.c **** {
 111              		.loc 1 115 0
 112              		.cfi_startproc
 113              		@ Volatile: function does not return.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.L10:
 118 0000 FEE7     		b	.L10
 119              		.cfi_endproc
 120              	.LFE129:
ARM GAS  /tmp/ccvTkAwQ.s 			page 5


 122              		.section	.text.UsageFault_Handler,"ax",%progbits
 123              		.align	1
 124              		.global	UsageFault_Handler
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu fpv4-sp-d16
 130              	UsageFault_Handler:
 131              	.LFB130:
 116:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 117:Src/stm32f4xx_it.c **** 
 118:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 119:Src/stm32f4xx_it.c ****   while (1)
 120:Src/stm32f4xx_it.c ****   {
 121:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 122:Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 123:Src/stm32f4xx_it.c ****   }
 124:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 125:Src/stm32f4xx_it.c **** 
 126:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 127:Src/stm32f4xx_it.c **** }
 128:Src/stm32f4xx_it.c **** 
 129:Src/stm32f4xx_it.c **** /**
 130:Src/stm32f4xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 131:Src/stm32f4xx_it.c **** */
 132:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 133:Src/stm32f4xx_it.c **** {
 132              		.loc 1 133 0
 133              		.cfi_startproc
 134              		@ Volatile: function does not return.
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.L12:
 139 0000 FEE7     		b	.L12
 140              		.cfi_endproc
 141              	.LFE130:
 143              		.section	.text.SVC_Handler,"ax",%progbits
 144              		.align	1
 145              		.global	SVC_Handler
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	SVC_Handler:
 152              	.LFB131:
 134:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 135:Src/stm32f4xx_it.c **** 
 136:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 137:Src/stm32f4xx_it.c ****   while (1)
 138:Src/stm32f4xx_it.c ****   {
 139:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 140:Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 141:Src/stm32f4xx_it.c ****   }
 142:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 143:Src/stm32f4xx_it.c **** 
 144:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
ARM GAS  /tmp/ccvTkAwQ.s 			page 6


 145:Src/stm32f4xx_it.c **** }
 146:Src/stm32f4xx_it.c **** 
 147:Src/stm32f4xx_it.c **** /**
 148:Src/stm32f4xx_it.c **** * @brief This function handles System service call via SWI instruction.
 149:Src/stm32f4xx_it.c **** */
 150:Src/stm32f4xx_it.c **** void SVC_Handler(void)
 151:Src/stm32f4xx_it.c **** {
 153              		.loc 1 151 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 152:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 153:Src/stm32f4xx_it.c **** 
 154:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 155:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 156:Src/stm32f4xx_it.c **** 
 157:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 158:Src/stm32f4xx_it.c **** }
 158              		.loc 1 158 0
 159 0000 7047     		bx	lr
 160              		.cfi_endproc
 161              	.LFE131:
 163              		.section	.text.DebugMon_Handler,"ax",%progbits
 164              		.align	1
 165              		.global	DebugMon_Handler
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	DebugMon_Handler:
 172              	.LFB132:
 159:Src/stm32f4xx_it.c **** 
 160:Src/stm32f4xx_it.c **** /**
 161:Src/stm32f4xx_it.c **** * @brief This function handles Debug monitor.
 162:Src/stm32f4xx_it.c **** */
 163:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 164:Src/stm32f4xx_it.c **** {
 173              		.loc 1 164 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 165:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 166:Src/stm32f4xx_it.c **** 
 167:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 168:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 169:Src/stm32f4xx_it.c **** 
 170:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 171:Src/stm32f4xx_it.c **** }
 178              		.loc 1 171 0
 179 0000 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE132:
 183              		.section	.text.PendSV_Handler,"ax",%progbits
 184              		.align	1
 185              		.global	PendSV_Handler
ARM GAS  /tmp/ccvTkAwQ.s 			page 7


 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	PendSV_Handler:
 192              	.LFB133:
 172:Src/stm32f4xx_it.c **** 
 173:Src/stm32f4xx_it.c **** /**
 174:Src/stm32f4xx_it.c **** * @brief This function handles Pendable request for system service.
 175:Src/stm32f4xx_it.c **** */
 176:Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 177:Src/stm32f4xx_it.c **** {
 193              		.loc 1 177 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		@ link register save eliminated.
 178:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 179:Src/stm32f4xx_it.c **** 
 180:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 181:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 182:Src/stm32f4xx_it.c **** 
 183:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 184:Src/stm32f4xx_it.c **** }
 198              		.loc 1 184 0
 199 0000 7047     		bx	lr
 200              		.cfi_endproc
 201              	.LFE133:
 203              		.section	.text.SysTick_Handler,"ax",%progbits
 204              		.align	1
 205              		.global	SysTick_Handler
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv4-sp-d16
 211              	SysTick_Handler:
 212              	.LFB134:
 185:Src/stm32f4xx_it.c **** 
 186:Src/stm32f4xx_it.c **** /**
 187:Src/stm32f4xx_it.c **** * @brief This function handles System tick timer.
 188:Src/stm32f4xx_it.c **** */
 189:Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 190:Src/stm32f4xx_it.c **** {
 213              		.loc 1 190 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 08B5     		push	{r3, lr}
 218              	.LCFI1:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 3, -8
 221              		.cfi_offset 14, -4
 191:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 192:Src/stm32f4xx_it.c **** 
 193:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 194:Src/stm32f4xx_it.c ****   HAL_IncTick();
 222              		.loc 1 194 0
ARM GAS  /tmp/ccvTkAwQ.s 			page 8


 223 0002 FFF7FEFF 		bl	HAL_IncTick
 224              	.LVL2:
 195:Src/stm32f4xx_it.c ****   HAL_SYSTICK_IRQHandler();
 225              		.loc 1 195 0
 226 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 227              	.LVL3:
 196:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 197:Src/stm32f4xx_it.c **** 
 198:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 199:Src/stm32f4xx_it.c **** }
 228              		.loc 1 199 0
 229 000a 08BD     		pop	{r3, pc}
 230              		.cfi_endproc
 231              	.LFE134:
 233              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 234              		.align	1
 235              		.global	SPI2_IRQHandler
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	SPI2_IRQHandler:
 242              	.LFB135:
 200:Src/stm32f4xx_it.c **** 
 201:Src/stm32f4xx_it.c **** /******************************************************************************/
 202:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 203:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 204:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 205:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 206:Src/stm32f4xx_it.c **** /******************************************************************************/
 207:Src/stm32f4xx_it.c **** 
 208:Src/stm32f4xx_it.c **** 
 209:Src/stm32f4xx_it.c **** /**
 210:Src/stm32f4xx_it.c **** * @brief This function handles SPI2 global interrupt.
 211:Src/stm32f4xx_it.c **** */
 212:Src/stm32f4xx_it.c **** void SPI2_IRQHandler(void)
 213:Src/stm32f4xx_it.c **** {
 243              		.loc 1 213 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 10B5     		push	{r4, lr}
 248              	.LCFI2:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 4, -8
 251              		.cfi_offset 14, -4
 214:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 0 */
 215:Src/stm32f4xx_it.c ****   
 216:Src/stm32f4xx_it.c **** 
 217:Src/stm32f4xx_it.c ****   if ((__HAL_I2S_GET_FLAG(&hi2s2, I2S_FLAG_RXNE) == SET) && (__HAL_I2S_GET_IT_SOURCE(&hi2s2, I2S_IT
 252              		.loc 1 217 0
 253 0002 274B     		ldr	r3, .L24
 254 0004 1B68     		ldr	r3, [r3]
 255 0006 9A68     		ldr	r2, [r3, #8]
 256 0008 12F0010F 		tst	r2, #1
 257 000c 0FD0     		beq	.L19
 258              		.loc 1 217 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccvTkAwQ.s 			page 9


 259 000e 5A68     		ldr	r2, [r3, #4]
 260 0010 12F0400F 		tst	r2, #64
 261 0014 0BD0     		beq	.L19
 218:Src/stm32f4xx_it.c ****     PDM_BUF_1[local_pdm_pointer++] = hi2s2.Instance->DR;
 262              		.loc 1 218 0 is_stmt 1
 263 0016 D868     		ldr	r0, [r3, #12]
 264 0018 224B     		ldr	r3, .L24+4
 265 001a 1968     		ldr	r1, [r3]
 266 001c 224B     		ldr	r3, .L24+8
 267 001e 1A68     		ldr	r2, [r3]
 268 0020 541C     		adds	r4, r2, #1
 269 0022 1C60     		str	r4, [r3]
 270 0024 21F81200 		strh	r0, [r1, r2, lsl #1]	@ movhi
 219:Src/stm32f4xx_it.c **** 
 220:Src/stm32f4xx_it.c ****     if (local_pdm_pointer >= 64) {
 271              		.loc 1 220 0
 272 0028 1B68     		ldr	r3, [r3]
 273 002a 3F2B     		cmp	r3, #63
 274 002c 03D8     		bhi	.L23
 275              	.L19:
 221:Src/stm32f4xx_it.c ****       local_pdm_pointer = 0;
 222:Src/stm32f4xx_it.c ****       PDM_Filter(PDM_BUF_1, current_PCM_buffer + local_pcm_pointer, &PDM1_filter_handler);
 223:Src/stm32f4xx_it.c ****       local_pcm_pointer++;
 224:Src/stm32f4xx_it.c ****       if (local_pcm_pointer >= PCM_BUF_SIZE) {
 225:Src/stm32f4xx_it.c ****         local_pcm_pointer = 0;
 226:Src/stm32f4xx_it.c ****         RECORD_ENABLE = 0; // NB! RECORDING IS DISABLED AFTER FIRST BUFFER
 227:Src/stm32f4xx_it.c ****         __HAL_I2S_DISABLE_IT(&hi2s2, I2S_IT_RXNE);
 228:Src/stm32f4xx_it.c ****         hi2s2.State = HAL_I2S_STATE_READY;
 229:Src/stm32f4xx_it.c ****         if (PCM_switch_flag == 0) {
 230:Src/stm32f4xx_it.c ****           current_PCM_buffer = PCM_BUF_2;
 231:Src/stm32f4xx_it.c ****         }
 232:Src/stm32f4xx_it.c ****         else {
 233:Src/stm32f4xx_it.c ****           current_PCM_buffer = PCM_BUF_1;
 234:Src/stm32f4xx_it.c ****         }
 235:Src/stm32f4xx_it.c ****         PCM_switch_flag ^= 1;
 236:Src/stm32f4xx_it.c ****       }
 237:Src/stm32f4xx_it.c ****     }
 238:Src/stm32f4xx_it.c ****   }
 239:Src/stm32f4xx_it.c ****   // extern uint16_t dataBuffer[];
 240:Src/stm32f4xx_it.c ****   // if (HAL_SPI_GetState(&hi2s2) == HAL_SPI_STATE_READY){
 241:Src/stm32f4xx_it.c ****   //   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 242:Src/stm32f4xx_it.c ****   //   HAL_Delay(200);
 243:Src/stm32f4xx_it.c ****   //   // HAL_I2S_Receive_IT(&hi2s2, dataBuffer, 1024);
 244:Src/stm32f4xx_it.c ****   // }
 245:Src/stm32f4xx_it.c ****   /* USER CODE END SPI2_IRQn 0 */
 246:Src/stm32f4xx_it.c ****   HAL_I2S_IRQHandler(&hi2s2);
 276              		.loc 1 246 0
 277 002e 1C48     		ldr	r0, .L24
 278 0030 FFF7FEFF 		bl	HAL_I2S_IRQHandler
 279              	.LVL4:
 247:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 1 */
 248:Src/stm32f4xx_it.c ****   // if ((RECORD_ENABLE == 1) && (PDM_complete_flag == 1)) {
 249:Src/stm32f4xx_it.c ****   //   HAL_I2S_Receive_IT(&hi2s2, PDM_BUF_1, DECIMATION_FACTOR);
 250:Src/stm32f4xx_it.c ****   //   PDM_complete_flag = 0;
 251:Src/stm32f4xx_it.c ****   // }
 252:Src/stm32f4xx_it.c ****   /* USER CODE END SPI2_IRQn 1 */
 253:Src/stm32f4xx_it.c **** }
ARM GAS  /tmp/ccvTkAwQ.s 			page 10


 280              		.loc 1 253 0
 281 0034 10BD     		pop	{r4, pc}
 282              	.L23:
 221:Src/stm32f4xx_it.c ****       local_pdm_pointer = 0;
 283              		.loc 1 221 0
 284 0036 1C4B     		ldr	r3, .L24+8
 285 0038 0022     		movs	r2, #0
 286 003a 1A60     		str	r2, [r3]
 222:Src/stm32f4xx_it.c ****       local_pcm_pointer++;
 287              		.loc 1 222 0
 288 003c 1B4B     		ldr	r3, .L24+12
 289 003e 1B68     		ldr	r3, [r3]
 290 0040 1B4C     		ldr	r4, .L24+16
 291 0042 2168     		ldr	r1, [r4]
 292 0044 1B4A     		ldr	r2, .L24+20
 293 0046 03EB4101 		add	r1, r3, r1, lsl #1
 294 004a 164B     		ldr	r3, .L24+4
 295 004c 1868     		ldr	r0, [r3]
 296 004e FFF7FEFF 		bl	PDM_Filter
 297              	.LVL5:
 223:Src/stm32f4xx_it.c ****       if (local_pcm_pointer >= PCM_BUF_SIZE) {
 298              		.loc 1 223 0
 299 0052 2368     		ldr	r3, [r4]
 300 0054 0133     		adds	r3, r3, #1
 301 0056 2360     		str	r3, [r4]
 224:Src/stm32f4xx_it.c ****         local_pcm_pointer = 0;
 302              		.loc 1 224 0
 303 0058 B3F5005F 		cmp	r3, #8192
 304 005c E7D3     		bcc	.L19
 225:Src/stm32f4xx_it.c ****         RECORD_ENABLE = 0; // NB! RECORDING IS DISABLED AFTER FIRST BUFFER
 305              		.loc 1 225 0
 306 005e 0023     		movs	r3, #0
 307 0060 2360     		str	r3, [r4]
 226:Src/stm32f4xx_it.c ****         __HAL_I2S_DISABLE_IT(&hi2s2, I2S_IT_RXNE);
 308              		.loc 1 226 0
 309 0062 154A     		ldr	r2, .L24+24
 310 0064 1370     		strb	r3, [r2]
 227:Src/stm32f4xx_it.c ****         hi2s2.State = HAL_I2S_STATE_READY;
 311              		.loc 1 227 0
 312 0066 0E4A     		ldr	r2, .L24
 313 0068 1168     		ldr	r1, [r2]
 314 006a 4B68     		ldr	r3, [r1, #4]
 315 006c 23F04003 		bic	r3, r3, #64
 316 0070 1B04     		lsls	r3, r3, #16
 317 0072 1B0C     		lsrs	r3, r3, #16
 318 0074 4B60     		str	r3, [r1, #4]
 228:Src/stm32f4xx_it.c ****         if (PCM_switch_flag == 0) {
 319              		.loc 1 228 0
 320 0076 0123     		movs	r3, #1
 321 0078 82F84130 		strb	r3, [r2, #65]
 229:Src/stm32f4xx_it.c ****           current_PCM_buffer = PCM_BUF_2;
 322              		.loc 1 229 0
 323 007c 0F4B     		ldr	r3, .L24+28
 324 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 325 0080 43B9     		cbnz	r3, .L20
 230:Src/stm32f4xx_it.c ****         }
 326              		.loc 1 230 0
ARM GAS  /tmp/ccvTkAwQ.s 			page 11


 327 0082 0F4A     		ldr	r2, .L24+32
 328 0084 1168     		ldr	r1, [r2]
 329 0086 094A     		ldr	r2, .L24+12
 330 0088 1160     		str	r1, [r2]
 331              	.L21:
 235:Src/stm32f4xx_it.c ****       }
 332              		.loc 1 235 0
 333 008a 83F00103 		eor	r3, r3, #1
 334 008e 0B4A     		ldr	r2, .L24+28
 335 0090 1370     		strb	r3, [r2]
 336 0092 CCE7     		b	.L19
 337              	.L20:
 233:Src/stm32f4xx_it.c ****         }
 338              		.loc 1 233 0
 339 0094 0B4A     		ldr	r2, .L24+36
 340 0096 1168     		ldr	r1, [r2]
 341 0098 044A     		ldr	r2, .L24+12
 342 009a 1160     		str	r1, [r2]
 343 009c F5E7     		b	.L21
 344              	.L25:
 345 009e 00BF     		.align	2
 346              	.L24:
 347 00a0 00000000 		.word	hi2s2
 348 00a4 00000000 		.word	PDM_BUF_1
 349 00a8 00000000 		.word	local_pdm_pointer
 350 00ac 00000000 		.word	current_PCM_buffer
 351 00b0 00000000 		.word	local_pcm_pointer
 352 00b4 00000000 		.word	PDM1_filter_handler
 353 00b8 00000000 		.word	RECORD_ENABLE
 354 00bc 00000000 		.word	PCM_switch_flag
 355 00c0 00000000 		.word	PCM_BUF_2
 356 00c4 00000000 		.word	PCM_BUF_1
 357              		.cfi_endproc
 358              	.LFE135:
 360              		.comm	local_pdm_pointer,4,4
 361              		.text
 362              	.Letext0:
 363              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 364              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 365              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 366              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 367              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 368              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 369              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 370              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 371              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 372              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 373              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 374              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 375              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 376              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 377              		.file 16 "Middlewares/ST/STM32_Audio/Addons/PDM/Inc/pdm2pcm_glo.h"
 378              		.file 17 "Inc/pdm2pcm.h"
 379              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 380              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccvTkAwQ.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccvTkAwQ.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccvTkAwQ.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccvTkAwQ.s:76     .text.HardFault_Handler:0000000000000020 $d
     /tmp/ccvTkAwQ.s:81     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:88     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccvTkAwQ.s:102    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:109    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccvTkAwQ.s:123    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:130    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccvTkAwQ.s:144    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:151    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccvTkAwQ.s:164    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:171    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccvTkAwQ.s:184    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:191    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccvTkAwQ.s:204    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:211    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccvTkAwQ.s:234    .text.SPI2_IRQHandler:0000000000000000 $t
     /tmp/ccvTkAwQ.s:241    .text.SPI2_IRQHandler:0000000000000000 SPI2_IRQHandler
     /tmp/ccvTkAwQ.s:347    .text.SPI2_IRQHandler:00000000000000a0 $d
                            *COM*:0000000000000004 local_pdm_pointer

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_I2S_IRQHandler
PDM_Filter
hi2s2
PDM_BUF_1
current_PCM_buffer
local_pcm_pointer
PDM1_filter_handler
RECORD_ENABLE
PCM_switch_flag
PCM_BUF_2
PCM_BUF_1
